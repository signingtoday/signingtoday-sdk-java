/*
 * Signing Today Web
 * *Signing Today* is the perfect Digital Signature Gateway. Whenever in Your workflow You need to add one or more Digital Signatures to Your document, *Signing Today* is the right choice. You prepare Your documents, *Signing Today* takes care of all the rest: send invitations (`signature tickets`) to signers, collects their signatures, send You back the signed document. Integrating *Signing Today* in Your existing applications is very easy. Just follow these API specifications and get inspired by the many examples presented hereafter. 
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package signingToday.client.api;

import signingToday.client.ApiCallback;
import signingToday.client.ApiClient;
import signingToday.client.ApiException;
import signingToday.client.ApiResponse;
import signingToday.client.Configuration;
import signingToday.client.Pair;
import signingToday.client.ProgressRequestBody;
import signingToday.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import signingToday.client.model.ErrorResponse;
import signingToday.client.model.RobotConfiguration;
import signingToday.client.model.ServiceFailureResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class RobotApi {
    private ApiClient localVarApiClient;

    public RobotApi() {
        this(Configuration.getDefaultApiClient());
    }

    public RobotApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for robotConfigurationPut
     * @param robotConfiguration RobotConfiguration. (required)
     * @param username The _username_ associated to the account (optional)
     * @param domain The _domain_ associated to the account (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The request has been satisfyied. No output. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User authentication was not effective (e.g. not provided, invalid or expired). </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal failure of the service. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call robotConfigurationPutCall(RobotConfiguration robotConfiguration, String username, String domain, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = robotConfiguration;

        // create path and map variables
        String localVarPath = "/robot/configuration";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (username != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("username", username));
        }

        if (domain != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("domain", domain));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call robotConfigurationPutValidateBeforeCall(RobotConfiguration robotConfiguration, String username, String domain, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'robotConfiguration' is set
        if (robotConfiguration == null) {
            throw new ApiException("Missing the required parameter 'robotConfiguration' when calling robotConfigurationPut(Async)");
        }
        

        okhttp3.Call localVarCall = robotConfigurationPutCall(robotConfiguration, username, domain, _callback);
        return localVarCall;

    }

    /**
     * Edit the Robot configuration
     * This API allows to edit the Robot configuration. 
     * @param robotConfiguration RobotConfiguration. (required)
     * @param username The _username_ associated to the account (optional)
     * @param domain The _domain_ associated to the account (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The request has been satisfyied. No output. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User authentication was not effective (e.g. not provided, invalid or expired). </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal failure of the service. </td><td>  -  </td></tr>
     </table>
     */
    public void robotConfigurationPut(RobotConfiguration robotConfiguration, String username, String domain) throws ApiException {
        robotConfigurationPutWithHttpInfo(robotConfiguration, username, domain);
    }

    /**
     * Edit the Robot configuration
     * This API allows to edit the Robot configuration. 
     * @param robotConfiguration RobotConfiguration. (required)
     * @param username The _username_ associated to the account (optional)
     * @param domain The _domain_ associated to the account (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The request has been satisfyied. No output. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User authentication was not effective (e.g. not provided, invalid or expired). </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal failure of the service. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> robotConfigurationPutWithHttpInfo(RobotConfiguration robotConfiguration, String username, String domain) throws ApiException {
        okhttp3.Call localVarCall = robotConfigurationPutValidateBeforeCall(robotConfiguration, username, domain, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Edit the Robot configuration (asynchronously)
     * This API allows to edit the Robot configuration. 
     * @param robotConfiguration RobotConfiguration. (required)
     * @param username The _username_ associated to the account (optional)
     * @param domain The _domain_ associated to the account (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The request has been satisfyied. No output. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User authentication was not effective (e.g. not provided, invalid or expired). </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal failure of the service. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call robotConfigurationPutAsync(RobotConfiguration robotConfiguration, String username, String domain, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = robotConfigurationPutValidateBeforeCall(robotConfiguration, username, domain, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
