/*
 * Signing Today Web
 * *Signing Today* is the perfect Digital Signature Gateway. Whenever in Your workflow You need to add one or more Digital Signatures to Your document, *Signing Today* is the right choice. You prepare Your documents, *Signing Today* takes care of all the rest: send invitations (`signature tickets`) to signers, collects their signatures, send You back the signed document. Integrating *Signing Today* in Your existing applications is very easy. Just follow these API specifications and get inspired by the many examples presented hereafter. 
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package signingToday.client.api;

import signingToday.client.ApiCallback;
import signingToday.client.ApiClient;
import signingToday.client.ApiException;
import signingToday.client.ApiResponse;
import signingToday.client.Configuration;
import signingToday.client.Pair;
import signingToday.client.ProgressRequestBody;
import signingToday.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import signingToday.client.model.DigitalSignatureTransaction;
import signingToday.client.model.ErrorResponse;
import java.io.File;
import signingToday.client.model.LFResource;
import signingToday.client.model.ServiceFailureResponse;
import java.util.UUID;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ResourcesApi {
    private ApiClient localVarApiClient;

    public ResourcesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ResourcesApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for dSTIdResourcesGet
     * @param id The value of _the unique id_ (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The response body contains all resources associated to a DST into a zip file. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User authentication was not effective (e.g. not provided, invalid or expired). </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User is not allowed to perform the request. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The resource was not found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal failure of the service. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dSTIdResourcesGetCall(UUID id, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/DST/{id}/resources"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/octet-stream", "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dSTIdResourcesGetValidateBeforeCall(UUID id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dSTIdResourcesGet(Async)");
        }
        

        okhttp3.Call localVarCall = dSTIdResourcesGetCall(id, _callback);
        return localVarCall;

    }

    /**
     * Retrieve all resources associated to a DST
     * This API allows to retrieve all resources associated to a DST.
     * @param id The value of _the unique id_ (required)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The response body contains all resources associated to a DST into a zip file. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User authentication was not effective (e.g. not provided, invalid or expired). </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User is not allowed to perform the request. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The resource was not found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal failure of the service. </td><td>  -  </td></tr>
     </table>
     */
    public File dSTIdResourcesGet(UUID id) throws ApiException {
        ApiResponse<File> localVarResp = dSTIdResourcesGetWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * Retrieve all resources associated to a DST
     * This API allows to retrieve all resources associated to a DST.
     * @param id The value of _the unique id_ (required)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The response body contains all resources associated to a DST into a zip file. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User authentication was not effective (e.g. not provided, invalid or expired). </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User is not allowed to perform the request. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The resource was not found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal failure of the service. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<File> dSTIdResourcesGetWithHttpInfo(UUID id) throws ApiException {
        okhttp3.Call localVarCall = dSTIdResourcesGetValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve all resources associated to a DST (asynchronously)
     * This API allows to retrieve all resources associated to a DST.
     * @param id The value of _the unique id_ (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The response body contains all resources associated to a DST into a zip file. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User authentication was not effective (e.g. not provided, invalid or expired). </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User is not allowed to perform the request. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The resource was not found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal failure of the service. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dSTIdResourcesGetAsync(UUID id, final ApiCallback<File> _callback) throws ApiException {

        okhttp3.Call localVarCall = dSTIdResourcesGetValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dSTIdResourcesPatch
     * @param id The value of _the unique id_ (required)
     * @param file The file to upload (required)
     * @param filename The name of the file (required)
     * @param resourceType  (required)
     * @param title User-defined title of the resource. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The DST patched with the new resource. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Result of a client passing incorrect or invalid data. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User authentication was not effective (e.g. not provided, invalid or expired). </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User is not allowed to perform the request. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The resource was not found. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Cannot satisfy the request because the resource is in an illegal status. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal failure of the service. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dSTIdResourcesPatchCall(UUID id, File file, String filename, String resourceType, String title, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/DST/{id}/resources"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (file != null) {
            localVarFormParams.put("file", file);
        }

        if (filename != null) {
            localVarFormParams.put("filename", filename);
        }

        if (resourceType != null) {
            localVarFormParams.put("resourceType", resourceType);
        }

        if (title != null) {
            localVarFormParams.put("title", title);
        }

        final String[] localVarAccepts = {
            "application/json", "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dSTIdResourcesPatchValidateBeforeCall(UUID id, File file, String filename, String resourceType, String title, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dSTIdResourcesPatch(Async)");
        }
        
        // verify the required parameter 'file' is set
        if (file == null) {
            throw new ApiException("Missing the required parameter 'file' when calling dSTIdResourcesPatch(Async)");
        }
        
        // verify the required parameter 'filename' is set
        if (filename == null) {
            throw new ApiException("Missing the required parameter 'filename' when calling dSTIdResourcesPatch(Async)");
        }
        
        // verify the required parameter 'resourceType' is set
        if (resourceType == null) {
            throw new ApiException("Missing the required parameter 'resourceType' when calling dSTIdResourcesPatch(Async)");
        }
        

        okhttp3.Call localVarCall = dSTIdResourcesPatchCall(id, file, filename, resourceType, title, _callback);
        return localVarCall;

    }

    /**
     * Append a new resource to a DST
     * This API allows to append a new Resource to a DST.
     * @param id The value of _the unique id_ (required)
     * @param file The file to upload (required)
     * @param filename The name of the file (required)
     * @param resourceType  (required)
     * @param title User-defined title of the resource. (optional)
     * @return DigitalSignatureTransaction
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The DST patched with the new resource. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Result of a client passing incorrect or invalid data. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User authentication was not effective (e.g. not provided, invalid or expired). </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User is not allowed to perform the request. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The resource was not found. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Cannot satisfy the request because the resource is in an illegal status. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal failure of the service. </td><td>  -  </td></tr>
     </table>
     */
    public DigitalSignatureTransaction dSTIdResourcesPatch(UUID id, File file, String filename, String resourceType, String title) throws ApiException {
        ApiResponse<DigitalSignatureTransaction> localVarResp = dSTIdResourcesPatchWithHttpInfo(id, file, filename, resourceType, title);
        return localVarResp.getData();
    }

    /**
     * Append a new resource to a DST
     * This API allows to append a new Resource to a DST.
     * @param id The value of _the unique id_ (required)
     * @param file The file to upload (required)
     * @param filename The name of the file (required)
     * @param resourceType  (required)
     * @param title User-defined title of the resource. (optional)
     * @return ApiResponse&lt;DigitalSignatureTransaction&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The DST patched with the new resource. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Result of a client passing incorrect or invalid data. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User authentication was not effective (e.g. not provided, invalid or expired). </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User is not allowed to perform the request. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The resource was not found. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Cannot satisfy the request because the resource is in an illegal status. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal failure of the service. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DigitalSignatureTransaction> dSTIdResourcesPatchWithHttpInfo(UUID id, File file, String filename, String resourceType, String title) throws ApiException {
        okhttp3.Call localVarCall = dSTIdResourcesPatchValidateBeforeCall(id, file, filename, resourceType, title, null);
        Type localVarReturnType = new TypeToken<DigitalSignatureTransaction>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Append a new resource to a DST (asynchronously)
     * This API allows to append a new Resource to a DST.
     * @param id The value of _the unique id_ (required)
     * @param file The file to upload (required)
     * @param filename The name of the file (required)
     * @param resourceType  (required)
     * @param title User-defined title of the resource. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The DST patched with the new resource. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Result of a client passing incorrect or invalid data. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User authentication was not effective (e.g. not provided, invalid or expired). </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User is not allowed to perform the request. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The resource was not found. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Cannot satisfy the request because the resource is in an illegal status. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal failure of the service. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dSTIdResourcesPatchAsync(UUID id, File file, String filename, String resourceType, String title, final ApiCallback<DigitalSignatureTransaction> _callback) throws ApiException {

        okhttp3.Call localVarCall = dSTIdResourcesPatchValidateBeforeCall(id, file, filename, resourceType, title, _callback);
        Type localVarReturnType = new TypeToken<DigitalSignatureTransaction>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dSTResourceIdDelete
     * @param id The value of _the unique id_ (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The DST Updated. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User authentication was not effective (e.g. not provided, invalid or expired). </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User is not allowed to perform the request. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The resource was not found. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Cannot satisfy the request because the resource is in an illegal status. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal failure of the service. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dSTResourceIdDeleteCall(UUID id, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/DST/resource/{id}"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json", "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dSTResourceIdDeleteValidateBeforeCall(UUID id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dSTResourceIdDelete(Async)");
        }
        

        okhttp3.Call localVarCall = dSTResourceIdDeleteCall(id, _callback);
        return localVarCall;

    }

    /**
     * Delete a Resource
     * This API allows to delete a Resource.
     * @param id The value of _the unique id_ (required)
     * @return DigitalSignatureTransaction
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The DST Updated. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User authentication was not effective (e.g. not provided, invalid or expired). </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User is not allowed to perform the request. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The resource was not found. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Cannot satisfy the request because the resource is in an illegal status. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal failure of the service. </td><td>  -  </td></tr>
     </table>
     */
    public DigitalSignatureTransaction dSTResourceIdDelete(UUID id) throws ApiException {
        ApiResponse<DigitalSignatureTransaction> localVarResp = dSTResourceIdDeleteWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * Delete a Resource
     * This API allows to delete a Resource.
     * @param id The value of _the unique id_ (required)
     * @return ApiResponse&lt;DigitalSignatureTransaction&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The DST Updated. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User authentication was not effective (e.g. not provided, invalid or expired). </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User is not allowed to perform the request. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The resource was not found. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Cannot satisfy the request because the resource is in an illegal status. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal failure of the service. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DigitalSignatureTransaction> dSTResourceIdDeleteWithHttpInfo(UUID id) throws ApiException {
        okhttp3.Call localVarCall = dSTResourceIdDeleteValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<DigitalSignatureTransaction>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete a Resource (asynchronously)
     * This API allows to delete a Resource.
     * @param id The value of _the unique id_ (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The DST Updated. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User authentication was not effective (e.g. not provided, invalid or expired). </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User is not allowed to perform the request. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The resource was not found. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Cannot satisfy the request because the resource is in an illegal status. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal failure of the service. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dSTResourceIdDeleteAsync(UUID id, final ApiCallback<DigitalSignatureTransaction> _callback) throws ApiException {

        okhttp3.Call localVarCall = dSTResourceIdDeleteValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<DigitalSignatureTransaction>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for resourceIdGet
     * @param id The value of _the unique id_ (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The response is the binary resource file content. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User authentication was not effective (e.g. not provided, invalid or expired). </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User is not allowed to perform the request. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The resource was not found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal failure of the service. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call resourceIdGetCall(UUID id, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/resource/{id}"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/octet-stream", "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call resourceIdGetValidateBeforeCall(UUID id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling resourceIdGet(Async)");
        }
        

        okhttp3.Call localVarCall = resourceIdGetCall(id, _callback);
        return localVarCall;

    }

    /**
     * Retrieve a Resource
     * This API allows to retrieve a Resource.
     * @param id The value of _the unique id_ (required)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The response is the binary resource file content. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User authentication was not effective (e.g. not provided, invalid or expired). </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User is not allowed to perform the request. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The resource was not found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal failure of the service. </td><td>  -  </td></tr>
     </table>
     */
    public File resourceIdGet(UUID id) throws ApiException {
        ApiResponse<File> localVarResp = resourceIdGetWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * Retrieve a Resource
     * This API allows to retrieve a Resource.
     * @param id The value of _the unique id_ (required)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The response is the binary resource file content. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User authentication was not effective (e.g. not provided, invalid or expired). </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User is not allowed to perform the request. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The resource was not found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal failure of the service. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<File> resourceIdGetWithHttpInfo(UUID id) throws ApiException {
        okhttp3.Call localVarCall = resourceIdGetValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve a Resource (asynchronously)
     * This API allows to retrieve a Resource.
     * @param id The value of _the unique id_ (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The response is the binary resource file content. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User authentication was not effective (e.g. not provided, invalid or expired). </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User is not allowed to perform the request. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The resource was not found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal failure of the service. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call resourceIdGetAsync(UUID id, final ApiCallback<File> _callback) throws ApiException {

        okhttp3.Call localVarCall = resourceIdGetValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for resourceIdPut
     * @param id The value of _the unique id_ (required)
     * @param lfResource Resource replacing current object. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The request has been satisfyied. No output. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Result of a client passing incorrect or invalid data. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User authentication was not effective (e.g. not provided, invalid or expired). </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User is not allowed to perform the request. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The resource was not found. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Cannot satisfy the request because the resource is in an illegal status. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal failure of the service. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call resourceIdPutCall(UUID id, LFResource lfResource, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = lfResource;

        // create path and map variables
        String localVarPath = "/resource/{id}"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call resourceIdPutValidateBeforeCall(UUID id, LFResource lfResource, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling resourceIdPut(Async)");
        }
        
        // verify the required parameter 'lfResource' is set
        if (lfResource == null) {
            throw new ApiException("Missing the required parameter 'lfResource' when calling resourceIdPut(Async)");
        }
        

        okhttp3.Call localVarCall = resourceIdPutCall(id, lfResource, _callback);
        return localVarCall;

    }

    /**
     * Update a Resource
     * This API allows to update a Resource.
     * @param id The value of _the unique id_ (required)
     * @param lfResource Resource replacing current object. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The request has been satisfyied. No output. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Result of a client passing incorrect or invalid data. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User authentication was not effective (e.g. not provided, invalid or expired). </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User is not allowed to perform the request. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The resource was not found. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Cannot satisfy the request because the resource is in an illegal status. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal failure of the service. </td><td>  -  </td></tr>
     </table>
     */
    public void resourceIdPut(UUID id, LFResource lfResource) throws ApiException {
        resourceIdPutWithHttpInfo(id, lfResource);
    }

    /**
     * Update a Resource
     * This API allows to update a Resource.
     * @param id The value of _the unique id_ (required)
     * @param lfResource Resource replacing current object. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The request has been satisfyied. No output. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Result of a client passing incorrect or invalid data. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User authentication was not effective (e.g. not provided, invalid or expired). </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User is not allowed to perform the request. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The resource was not found. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Cannot satisfy the request because the resource is in an illegal status. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal failure of the service. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> resourceIdPutWithHttpInfo(UUID id, LFResource lfResource) throws ApiException {
        okhttp3.Call localVarCall = resourceIdPutValidateBeforeCall(id, lfResource, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Update a Resource (asynchronously)
     * This API allows to update a Resource.
     * @param id The value of _the unique id_ (required)
     * @param lfResource Resource replacing current object. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The request has been satisfyied. No output. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Result of a client passing incorrect or invalid data. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User authentication was not effective (e.g. not provided, invalid or expired). </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User is not allowed to perform the request. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The resource was not found. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Cannot satisfy the request because the resource is in an illegal status. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal failure of the service. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call resourceIdPutAsync(UUID id, LFResource lfResource, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = resourceIdPutValidateBeforeCall(id, lfResource, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for userIdIdentityIdentityIdAppearanceDelete
     * @param id The value of _the unique id_ (required)
     * @param identityId The unique id of the _Identity_ (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The request has been satisfyied. No output. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User authentication was not effective (e.g. not provided, invalid or expired). </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User is not allowed to perform the request. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The resource was not found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal failure of the service. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call userIdIdentityIdentityIdAppearanceDeleteCall(UUID id, UUID identityId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/user/{id}/identity/{identity-id}/appearance"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()))
            .replaceAll("\\{" + "identity-id" + "\\}", localVarApiClient.escapeString(identityId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call userIdIdentityIdentityIdAppearanceDeleteValidateBeforeCall(UUID id, UUID identityId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling userIdIdentityIdentityIdAppearanceDelete(Async)");
        }
        
        // verify the required parameter 'identityId' is set
        if (identityId == null) {
            throw new ApiException("Missing the required parameter 'identityId' when calling userIdIdentityIdentityIdAppearanceDelete(Async)");
        }
        

        okhttp3.Call localVarCall = userIdIdentityIdentityIdAppearanceDeleteCall(id, identityId, _callback);
        return localVarCall;

    }

    /**
     * Delete a user appearance resource.
     * This API allows to delete an identity appearance resource.
     * @param id The value of _the unique id_ (required)
     * @param identityId The unique id of the _Identity_ (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The request has been satisfyied. No output. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User authentication was not effective (e.g. not provided, invalid or expired). </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User is not allowed to perform the request. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The resource was not found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal failure of the service. </td><td>  -  </td></tr>
     </table>
     */
    public void userIdIdentityIdentityIdAppearanceDelete(UUID id, UUID identityId) throws ApiException {
        userIdIdentityIdentityIdAppearanceDeleteWithHttpInfo(id, identityId);
    }

    /**
     * Delete a user appearance resource.
     * This API allows to delete an identity appearance resource.
     * @param id The value of _the unique id_ (required)
     * @param identityId The unique id of the _Identity_ (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The request has been satisfyied. No output. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User authentication was not effective (e.g. not provided, invalid or expired). </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User is not allowed to perform the request. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The resource was not found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal failure of the service. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> userIdIdentityIdentityIdAppearanceDeleteWithHttpInfo(UUID id, UUID identityId) throws ApiException {
        okhttp3.Call localVarCall = userIdIdentityIdentityIdAppearanceDeleteValidateBeforeCall(id, identityId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete a user appearance resource. (asynchronously)
     * This API allows to delete an identity appearance resource.
     * @param id The value of _the unique id_ (required)
     * @param identityId The unique id of the _Identity_ (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The request has been satisfyied. No output. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User authentication was not effective (e.g. not provided, invalid or expired). </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User is not allowed to perform the request. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The resource was not found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal failure of the service. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call userIdIdentityIdentityIdAppearanceDeleteAsync(UUID id, UUID identityId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = userIdIdentityIdentityIdAppearanceDeleteValidateBeforeCall(id, identityId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for userIdIdentityIdentityIdAppearanceGet
     * @param id The value of _the unique id_ (required)
     * @param identityId The unique id of the _Identity_ (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The response is the binary resource file content. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User authentication was not effective (e.g. not provided, invalid or expired). </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User is not allowed to perform the request. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The resource was not found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal failure of the service. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call userIdIdentityIdentityIdAppearanceGetCall(UUID id, UUID identityId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/user/{id}/identity/{identity-id}/appearance"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()))
            .replaceAll("\\{" + "identity-id" + "\\}", localVarApiClient.escapeString(identityId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/octet-stream", "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call userIdIdentityIdentityIdAppearanceGetValidateBeforeCall(UUID id, UUID identityId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling userIdIdentityIdentityIdAppearanceGet(Async)");
        }
        
        // verify the required parameter 'identityId' is set
        if (identityId == null) {
            throw new ApiException("Missing the required parameter 'identityId' when calling userIdIdentityIdentityIdAppearanceGet(Async)");
        }
        

        okhttp3.Call localVarCall = userIdIdentityIdentityIdAppearanceGetCall(id, identityId, _callback);
        return localVarCall;

    }

    /**
     * Download an identity appearance resource
     * This API allows to get the identity appearance resource.
     * @param id The value of _the unique id_ (required)
     * @param identityId The unique id of the _Identity_ (required)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The response is the binary resource file content. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User authentication was not effective (e.g. not provided, invalid or expired). </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User is not allowed to perform the request. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The resource was not found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal failure of the service. </td><td>  -  </td></tr>
     </table>
     */
    public File userIdIdentityIdentityIdAppearanceGet(UUID id, UUID identityId) throws ApiException {
        ApiResponse<File> localVarResp = userIdIdentityIdentityIdAppearanceGetWithHttpInfo(id, identityId);
        return localVarResp.getData();
    }

    /**
     * Download an identity appearance resource
     * This API allows to get the identity appearance resource.
     * @param id The value of _the unique id_ (required)
     * @param identityId The unique id of the _Identity_ (required)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The response is the binary resource file content. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User authentication was not effective (e.g. not provided, invalid or expired). </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User is not allowed to perform the request. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The resource was not found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal failure of the service. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<File> userIdIdentityIdentityIdAppearanceGetWithHttpInfo(UUID id, UUID identityId) throws ApiException {
        okhttp3.Call localVarCall = userIdIdentityIdentityIdAppearanceGetValidateBeforeCall(id, identityId, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Download an identity appearance resource (asynchronously)
     * This API allows to get the identity appearance resource.
     * @param id The value of _the unique id_ (required)
     * @param identityId The unique id of the _Identity_ (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The response is the binary resource file content. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User authentication was not effective (e.g. not provided, invalid or expired). </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User is not allowed to perform the request. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The resource was not found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal failure of the service. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call userIdIdentityIdentityIdAppearanceGetAsync(UUID id, UUID identityId, final ApiCallback<File> _callback) throws ApiException {

        okhttp3.Call localVarCall = userIdIdentityIdentityIdAppearanceGetValidateBeforeCall(id, identityId, _callback);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for userIdIdentityIdentityIdAppearancePost
     * @param id The value of _the unique id_ (required)
     * @param identityId The unique id of the _Identity_ (required)
     * @param file The path of the file to upload (required)
     * @param filename The name of the file (required)
     * @param resourceType The type of the resource (required)
     * @param title User-defined title of the resource (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The new created Resource </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Result of a client passing incorrect or invalid data. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User authentication was not effective (e.g. not provided, invalid or expired). </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User is not allowed to perform the request. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The resource was not found. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Cannot satisfy the request because the resource is in an illegal status. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal failure of the service. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call userIdIdentityIdentityIdAppearancePostCall(UUID id, UUID identityId, File file, String filename, String resourceType, String title, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/user/{id}/identity/{identity-id}/appearance"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()))
            .replaceAll("\\{" + "identity-id" + "\\}", localVarApiClient.escapeString(identityId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (file != null) {
            localVarFormParams.put("file", file);
        }

        if (filename != null) {
            localVarFormParams.put("filename", filename);
        }

        if (resourceType != null) {
            localVarFormParams.put("resourceType", resourceType);
        }

        if (title != null) {
            localVarFormParams.put("title", title);
        }

        final String[] localVarAccepts = {
            "application/json", "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call userIdIdentityIdentityIdAppearancePostValidateBeforeCall(UUID id, UUID identityId, File file, String filename, String resourceType, String title, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling userIdIdentityIdentityIdAppearancePost(Async)");
        }
        
        // verify the required parameter 'identityId' is set
        if (identityId == null) {
            throw new ApiException("Missing the required parameter 'identityId' when calling userIdIdentityIdentityIdAppearancePost(Async)");
        }
        
        // verify the required parameter 'file' is set
        if (file == null) {
            throw new ApiException("Missing the required parameter 'file' when calling userIdIdentityIdentityIdAppearancePost(Async)");
        }
        
        // verify the required parameter 'filename' is set
        if (filename == null) {
            throw new ApiException("Missing the required parameter 'filename' when calling userIdIdentityIdentityIdAppearancePost(Async)");
        }
        
        // verify the required parameter 'resourceType' is set
        if (resourceType == null) {
            throw new ApiException("Missing the required parameter 'resourceType' when calling userIdIdentityIdentityIdAppearancePost(Async)");
        }
        

        okhttp3.Call localVarCall = userIdIdentityIdentityIdAppearancePostCall(id, identityId, file, filename, resourceType, title, _callback);
        return localVarCall;

    }

    /**
     * Add a graphical appearance to a user&#39;s identity
     * This API allows to add a graphical appearance to the identity of a user.
     * @param id The value of _the unique id_ (required)
     * @param identityId The unique id of the _Identity_ (required)
     * @param file The path of the file to upload (required)
     * @param filename The name of the file (required)
     * @param resourceType The type of the resource (required)
     * @param title User-defined title of the resource (optional)
     * @return LFResource
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The new created Resource </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Result of a client passing incorrect or invalid data. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User authentication was not effective (e.g. not provided, invalid or expired). </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User is not allowed to perform the request. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The resource was not found. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Cannot satisfy the request because the resource is in an illegal status. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal failure of the service. </td><td>  -  </td></tr>
     </table>
     */
    public LFResource userIdIdentityIdentityIdAppearancePost(UUID id, UUID identityId, File file, String filename, String resourceType, String title) throws ApiException {
        ApiResponse<LFResource> localVarResp = userIdIdentityIdentityIdAppearancePostWithHttpInfo(id, identityId, file, filename, resourceType, title);
        return localVarResp.getData();
    }

    /**
     * Add a graphical appearance to a user&#39;s identity
     * This API allows to add a graphical appearance to the identity of a user.
     * @param id The value of _the unique id_ (required)
     * @param identityId The unique id of the _Identity_ (required)
     * @param file The path of the file to upload (required)
     * @param filename The name of the file (required)
     * @param resourceType The type of the resource (required)
     * @param title User-defined title of the resource (optional)
     * @return ApiResponse&lt;LFResource&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The new created Resource </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Result of a client passing incorrect or invalid data. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User authentication was not effective (e.g. not provided, invalid or expired). </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User is not allowed to perform the request. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The resource was not found. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Cannot satisfy the request because the resource is in an illegal status. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal failure of the service. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<LFResource> userIdIdentityIdentityIdAppearancePostWithHttpInfo(UUID id, UUID identityId, File file, String filename, String resourceType, String title) throws ApiException {
        okhttp3.Call localVarCall = userIdIdentityIdentityIdAppearancePostValidateBeforeCall(id, identityId, file, filename, resourceType, title, null);
        Type localVarReturnType = new TypeToken<LFResource>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Add a graphical appearance to a user&#39;s identity (asynchronously)
     * This API allows to add a graphical appearance to the identity of a user.
     * @param id The value of _the unique id_ (required)
     * @param identityId The unique id of the _Identity_ (required)
     * @param file The path of the file to upload (required)
     * @param filename The name of the file (required)
     * @param resourceType The type of the resource (required)
     * @param title User-defined title of the resource (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The new created Resource </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Result of a client passing incorrect or invalid data. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User authentication was not effective (e.g. not provided, invalid or expired). </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User is not allowed to perform the request. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The resource was not found. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Cannot satisfy the request because the resource is in an illegal status. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal failure of the service. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call userIdIdentityIdentityIdAppearancePostAsync(UUID id, UUID identityId, File file, String filename, String resourceType, String title, final ApiCallback<LFResource> _callback) throws ApiException {

        okhttp3.Call localVarCall = userIdIdentityIdentityIdAppearancePostValidateBeforeCall(id, identityId, file, filename, resourceType, title, _callback);
        Type localVarReturnType = new TypeToken<LFResource>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
