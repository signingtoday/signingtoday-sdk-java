/*
 * Signing Today Web
 * *Signing Today* is the perfect Digital Signature Gateway. Whenever in Your workflow You need to add one or more Digital Signatures to Your document, *Signing Today* is the right choice. You prepare Your documents, *Signing Today* takes care of all the rest: send invitations (`signature tickets`) to signers, collects their signatures, send You back the signed document. Integrating *Signing Today* in Your existing applications is very easy. Just follow these API specifications and get inspired by the many examples presented hereafter. 
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package signingToday.client.api;

import signingToday.client.ApiCallback;
import signingToday.client.ApiClient;
import signingToday.client.ApiException;
import signingToday.client.ApiResponse;
import signingToday.client.Configuration;
import signingToday.client.Pair;
import signingToday.client.ProgressRequestBody;
import signingToday.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import signingToday.client.model.DeviceAuthorizationResponse;
import signingToday.client.model.ErrorResponse;
import signingToday.client.model.InlineObject7;
import signingToday.client.model.ServiceFailureResponse;
import signingToday.client.model.TrustedDevicesGetResponse;
import java.util.UUID;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DevicesApi {
    private ApiClient localVarApiClient;

    public DevicesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DevicesApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for deviceAuthorizationDelete
     * @param deviceId The _deviceId_ to deregister (required)
     * @param userId Select the objects relative to the user specified by the parameter. If not specified will be used the id of the current authenticated user (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The request has been satisfyied. No output. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User authentication was not effective (e.g. not provided, invalid or expired). </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal failure of the service. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deviceAuthorizationDeleteCall(String deviceId, UUID userId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/device/authorization";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (deviceId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("deviceId", deviceId));
        }

        if (userId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("userId", userId));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deviceAuthorizationDeleteValidateBeforeCall(String deviceId, UUID userId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'deviceId' is set
        if (deviceId == null) {
            throw new ApiException("Missing the required parameter 'deviceId' when calling deviceAuthorizationDelete(Async)");
        }
        

        okhttp3.Call localVarCall = deviceAuthorizationDeleteCall(deviceId, userId, _callback);
        return localVarCall;

    }

    /**
     * Clear a trusted device
     * This APIs allows to deregister a _deviceId_ of a trusted device.  It also deletes any notification push-token associated to the trusted device. 
     * @param deviceId The _deviceId_ to deregister (required)
     * @param userId Select the objects relative to the user specified by the parameter. If not specified will be used the id of the current authenticated user (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The request has been satisfyied. No output. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User authentication was not effective (e.g. not provided, invalid or expired). </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal failure of the service. </td><td>  -  </td></tr>
     </table>
     */
    public void deviceAuthorizationDelete(String deviceId, UUID userId) throws ApiException {
        deviceAuthorizationDeleteWithHttpInfo(deviceId, userId);
    }

    /**
     * Clear a trusted device
     * This APIs allows to deregister a _deviceId_ of a trusted device.  It also deletes any notification push-token associated to the trusted device. 
     * @param deviceId The _deviceId_ to deregister (required)
     * @param userId Select the objects relative to the user specified by the parameter. If not specified will be used the id of the current authenticated user (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The request has been satisfyied. No output. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User authentication was not effective (e.g. not provided, invalid or expired). </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal failure of the service. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deviceAuthorizationDeleteWithHttpInfo(String deviceId, UUID userId) throws ApiException {
        okhttp3.Call localVarCall = deviceAuthorizationDeleteValidateBeforeCall(deviceId, userId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Clear a trusted device (asynchronously)
     * This APIs allows to deregister a _deviceId_ of a trusted device.  It also deletes any notification push-token associated to the trusted device. 
     * @param deviceId The _deviceId_ to deregister (required)
     * @param userId Select the objects relative to the user specified by the parameter. If not specified will be used the id of the current authenticated user (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The request has been satisfyied. No output. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User authentication was not effective (e.g. not provided, invalid or expired). </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal failure of the service. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deviceAuthorizationDeleteAsync(String deviceId, UUID userId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deviceAuthorizationDeleteValidateBeforeCall(deviceId, userId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deviceAuthorizationGet
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The challenge to be used for the authorization. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User authentication was not effective (e.g. not provided, invalid or expired). </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal failure of the service. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deviceAuthorizationGetCall(final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/device/authorization";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json", "image/png", "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deviceAuthorizationGetValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = deviceAuthorizationGetCall(_callback);
        return localVarCall;

    }

    /**
     * Retrieve a challenge for authorizing a new trusted device
     * This API allows to retrieve a challenge in order to authorize a new trusted device.   - If asked in image/png the challenge is given encoded as a QR-Code image.   - An invocation of the endpoint invalidate any previous challenge.   - The challenge lasts 10 minutes. 
     * @return DeviceAuthorizationResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The challenge to be used for the authorization. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User authentication was not effective (e.g. not provided, invalid or expired). </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal failure of the service. </td><td>  -  </td></tr>
     </table>
     */
    public DeviceAuthorizationResponse deviceAuthorizationGet() throws ApiException {
        ApiResponse<DeviceAuthorizationResponse> localVarResp = deviceAuthorizationGetWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Retrieve a challenge for authorizing a new trusted device
     * This API allows to retrieve a challenge in order to authorize a new trusted device.   - If asked in image/png the challenge is given encoded as a QR-Code image.   - An invocation of the endpoint invalidate any previous challenge.   - The challenge lasts 10 minutes. 
     * @return ApiResponse&lt;DeviceAuthorizationResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The challenge to be used for the authorization. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User authentication was not effective (e.g. not provided, invalid or expired). </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal failure of the service. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DeviceAuthorizationResponse> deviceAuthorizationGetWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = deviceAuthorizationGetValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<DeviceAuthorizationResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve a challenge for authorizing a new trusted device (asynchronously)
     * This API allows to retrieve a challenge in order to authorize a new trusted device.   - If asked in image/png the challenge is given encoded as a QR-Code image.   - An invocation of the endpoint invalidate any previous challenge.   - The challenge lasts 10 minutes. 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The challenge to be used for the authorization. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User authentication was not effective (e.g. not provided, invalid or expired). </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal failure of the service. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deviceAuthorizationGetAsync(final ApiCallback<DeviceAuthorizationResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = deviceAuthorizationGetValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<DeviceAuthorizationResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deviceAuthorizationPost
     * @param inlineObject7  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The token to be used for next calls of the endpoint /device/authorize. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User authentication was not effective (e.g. not provided, invalid or expired). </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal failure of the service. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deviceAuthorizationPostCall(InlineObject7 inlineObject7, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = inlineObject7;

        // create path and map variables
        String localVarPath = "/device/authorization";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json", "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deviceAuthorizationPostValidateBeforeCall(InlineObject7 inlineObject7, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'inlineObject7' is set
        if (inlineObject7 == null) {
            throw new ApiException("Missing the required parameter 'inlineObject7' when calling deviceAuthorizationPost(Async)");
        }
        

        okhttp3.Call localVarCall = deviceAuthorizationPostCall(inlineObject7, _callback);
        return localVarCall;

    }

    /**
     * Register a new trusted device
     * This API allows to register a new trusted device. If the device is already present, it returns the current associated Token and updates the name. 
     * @param inlineObject7  (required)
     * @return List&lt;UUID&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The token to be used for next calls of the endpoint /device/authorize. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User authentication was not effective (e.g. not provided, invalid or expired). </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal failure of the service. </td><td>  -  </td></tr>
     </table>
     */
    public List<UUID> deviceAuthorizationPost(InlineObject7 inlineObject7) throws ApiException {
        ApiResponse<List<UUID>> localVarResp = deviceAuthorizationPostWithHttpInfo(inlineObject7);
        return localVarResp.getData();
    }

    /**
     * Register a new trusted device
     * This API allows to register a new trusted device. If the device is already present, it returns the current associated Token and updates the name. 
     * @param inlineObject7  (required)
     * @return ApiResponse&lt;List&lt;UUID&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The token to be used for next calls of the endpoint /device/authorize. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User authentication was not effective (e.g. not provided, invalid or expired). </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal failure of the service. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<UUID>> deviceAuthorizationPostWithHttpInfo(InlineObject7 inlineObject7) throws ApiException {
        okhttp3.Call localVarCall = deviceAuthorizationPostValidateBeforeCall(inlineObject7, null);
        Type localVarReturnType = new TypeToken<List<UUID>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Register a new trusted device (asynchronously)
     * This API allows to register a new trusted device. If the device is already present, it returns the current associated Token and updates the name. 
     * @param inlineObject7  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The token to be used for next calls of the endpoint /device/authorize. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User authentication was not effective (e.g. not provided, invalid or expired). </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal failure of the service. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deviceAuthorizationPostAsync(InlineObject7 inlineObject7, final ApiCallback<List<UUID>> _callback) throws ApiException {

        okhttp3.Call localVarCall = deviceAuthorizationPostValidateBeforeCall(inlineObject7, _callback);
        Type localVarReturnType = new TypeToken<List<UUID>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for devicesGet
     * @param userId Select the objects relative to the user specified by the parameter. If not specified will be used the id of the current authenticated user (optional)
     * @param $top A number of results to return. Applied after **$skip**  (optional)
     * @param $skip An offset into the collection of results (optional)
     * @param $count If true, the server includes the count of all the items in the response  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The list of trusted devices. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User authentication was not effective (e.g. not provided, invalid or expired). </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call devicesGetCall(UUID userId, Integer $top, Long $skip, Boolean $count, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/devices";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (userId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("userId", userId));
        }

        if ($top != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$top", $top));
        }

        if ($skip != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$skip", $skip));
        }

        if ($count != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$count", $count));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json", "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call devicesGetValidateBeforeCall(UUID userId, Integer $top, Long $skip, Boolean $count, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = devicesGetCall(userId, $top, $skip, $count, _callback);
        return localVarCall;

    }

    /**
     * Get the list of trusted devices
     * The API allows to enumerate all the devices of a user. 
     * @param userId Select the objects relative to the user specified by the parameter. If not specified will be used the id of the current authenticated user (optional)
     * @param $top A number of results to return. Applied after **$skip**  (optional)
     * @param $skip An offset into the collection of results (optional)
     * @param $count If true, the server includes the count of all the items in the response  (optional)
     * @return TrustedDevicesGetResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The list of trusted devices. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User authentication was not effective (e.g. not provided, invalid or expired). </td><td>  -  </td></tr>
     </table>
     */
    public TrustedDevicesGetResponse devicesGet(UUID userId, Integer $top, Long $skip, Boolean $count) throws ApiException {
        ApiResponse<TrustedDevicesGetResponse> localVarResp = devicesGetWithHttpInfo(userId, $top, $skip, $count);
        return localVarResp.getData();
    }

    /**
     * Get the list of trusted devices
     * The API allows to enumerate all the devices of a user. 
     * @param userId Select the objects relative to the user specified by the parameter. If not specified will be used the id of the current authenticated user (optional)
     * @param $top A number of results to return. Applied after **$skip**  (optional)
     * @param $skip An offset into the collection of results (optional)
     * @param $count If true, the server includes the count of all the items in the response  (optional)
     * @return ApiResponse&lt;TrustedDevicesGetResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The list of trusted devices. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User authentication was not effective (e.g. not provided, invalid or expired). </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TrustedDevicesGetResponse> devicesGetWithHttpInfo(UUID userId, Integer $top, Long $skip, Boolean $count) throws ApiException {
        okhttp3.Call localVarCall = devicesGetValidateBeforeCall(userId, $top, $skip, $count, null);
        Type localVarReturnType = new TypeToken<TrustedDevicesGetResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get the list of trusted devices (asynchronously)
     * The API allows to enumerate all the devices of a user. 
     * @param userId Select the objects relative to the user specified by the parameter. If not specified will be used the id of the current authenticated user (optional)
     * @param $top A number of results to return. Applied after **$skip**  (optional)
     * @param $skip An offset into the collection of results (optional)
     * @param $count If true, the server includes the count of all the items in the response  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The list of trusted devices. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User authentication was not effective (e.g. not provided, invalid or expired). </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call devicesGetAsync(UUID userId, Integer $top, Long $skip, Boolean $count, final ApiCallback<TrustedDevicesGetResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = devicesGetValidateBeforeCall(userId, $top, $skip, $count, _callback);
        Type localVarReturnType = new TypeToken<TrustedDevicesGetResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
