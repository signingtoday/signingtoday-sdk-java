/*
 * Signing Today Web
 * *Signing Today* is the perfect Digital Signature Gateway. Whenever in Your workflow You need to add one or more Digital Signatures to Your document, *Signing Today* is the right choice. You prepare Your documents, *Signing Today* takes care of all the rest: send invitations (`signature tickets`) to signers, collects their signatures, send You back the signed document. Integrating *Signing Today* in Your existing applications is very easy. Just follow these API specifications and get inspired by the many examples presented hereafter. 
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package signingToday.client.api;

import signingToday.client.ApiCallback;
import signingToday.client.ApiClient;
import signingToday.client.ApiException;
import signingToday.client.ApiResponse;
import signingToday.client.Configuration;
import signingToday.client.Pair;
import signingToday.client.ProgressRequestBody;
import signingToday.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import signingToday.client.model.CreateUserRequest;
import signingToday.client.model.ErrorResponse;
import signingToday.client.model.Identity;
import signingToday.client.model.ServiceFailureResponse;
import java.util.UUID;
import signingToday.client.model.User;
import signingToday.client.model.UserGroup;
import signingToday.client.model.UserGroupGetResponse;
import signingToday.client.model.UsersGetResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class UsersApi {
    private ApiClient localVarApiClient;

    public UsersApi() {
        this(Configuration.getDefaultApiClient());
    }

    public UsersApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for userIdDelete
     * @param id The value of _the unique id_ (required)
     * @param enabled This is a _boolean_ parameter. If true the User is **enabled**  (optional, default to false)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The request has been satisfyied. No output. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User authentication was not effective (e.g. not provided, invalid or expired). </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User is not allowed to perform the request. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The resource was not found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal failure of the service. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call userIdDeleteCall(UUID id, Boolean enabled, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/user/{id}"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (enabled != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("enabled", enabled));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call userIdDeleteValidateBeforeCall(UUID id, Boolean enabled, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling userIdDelete(Async)");
        }
        

        okhttp3.Call localVarCall = userIdDeleteCall(id, enabled, _callback);
        return localVarCall;

    }

    /**
     * Enable or disable a User
     * This API allows to **enable** or **disable** a User account. 
     * @param id The value of _the unique id_ (required)
     * @param enabled This is a _boolean_ parameter. If true the User is **enabled**  (optional, default to false)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The request has been satisfyied. No output. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User authentication was not effective (e.g. not provided, invalid or expired). </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User is not allowed to perform the request. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The resource was not found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal failure of the service. </td><td>  -  </td></tr>
     </table>
     */
    public void userIdDelete(UUID id, Boolean enabled) throws ApiException {
        userIdDeleteWithHttpInfo(id, enabled);
    }

    /**
     * Enable or disable a User
     * This API allows to **enable** or **disable** a User account. 
     * @param id The value of _the unique id_ (required)
     * @param enabled This is a _boolean_ parameter. If true the User is **enabled**  (optional, default to false)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The request has been satisfyied. No output. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User authentication was not effective (e.g. not provided, invalid or expired). </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User is not allowed to perform the request. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The resource was not found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal failure of the service. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> userIdDeleteWithHttpInfo(UUID id, Boolean enabled) throws ApiException {
        okhttp3.Call localVarCall = userIdDeleteValidateBeforeCall(id, enabled, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Enable or disable a User (asynchronously)
     * This API allows to **enable** or **disable** a User account. 
     * @param id The value of _the unique id_ (required)
     * @param enabled This is a _boolean_ parameter. If true the User is **enabled**  (optional, default to false)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The request has been satisfyied. No output. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User authentication was not effective (e.g. not provided, invalid or expired). </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User is not allowed to perform the request. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The resource was not found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal failure of the service. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call userIdDeleteAsync(UUID id, Boolean enabled, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = userIdDeleteValidateBeforeCall(id, enabled, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for userIdGet
     * @param id The value of _the unique id_ (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The data matching the selection parameters. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User authentication was not effective (e.g. not provided, invalid or expired). </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User is not allowed to perform the request. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The resource was not found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal failure of the service. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call userIdGetCall(UUID id, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/user/{id}"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json", "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call userIdGetValidateBeforeCall(UUID id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling userIdGet(Async)");
        }
        

        okhttp3.Call localVarCall = userIdGetCall(id, _callback);
        return localVarCall;

    }

    /**
     * Retrieve a User
     * This API allows to retrieve a User.
     * @param id The value of _the unique id_ (required)
     * @return User
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The data matching the selection parameters. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User authentication was not effective (e.g. not provided, invalid or expired). </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User is not allowed to perform the request. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The resource was not found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal failure of the service. </td><td>  -  </td></tr>
     </table>
     */
    public User userIdGet(UUID id) throws ApiException {
        ApiResponse<User> localVarResp = userIdGetWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * Retrieve a User
     * This API allows to retrieve a User.
     * @param id The value of _the unique id_ (required)
     * @return ApiResponse&lt;User&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The data matching the selection parameters. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User authentication was not effective (e.g. not provided, invalid or expired). </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User is not allowed to perform the request. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The resource was not found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal failure of the service. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<User> userIdGetWithHttpInfo(UUID id) throws ApiException {
        okhttp3.Call localVarCall = userIdGetValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<User>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve a User (asynchronously)
     * This API allows to retrieve a User.
     * @param id The value of _the unique id_ (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The data matching the selection parameters. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User authentication was not effective (e.g. not provided, invalid or expired). </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User is not allowed to perform the request. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The resource was not found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal failure of the service. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call userIdGetAsync(UUID id, final ApiCallback<User> _callback) throws ApiException {

        okhttp3.Call localVarCall = userIdGetValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<User>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for userIdIdentitiesGet
     * @param id The value of _the unique id_ (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The identities associated to the user. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User authentication was not effective (e.g. not provided, invalid or expired). </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User is not allowed to perform the request. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The resource was not found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal failure of the service. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call userIdIdentitiesGetCall(UUID id, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/user/{id}/identities"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json", "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call userIdIdentitiesGetValidateBeforeCall(UUID id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling userIdIdentitiesGet(Async)");
        }
        

        okhttp3.Call localVarCall = userIdIdentitiesGetCall(id, _callback);
        return localVarCall;

    }

    /**
     * Retrieve User identities
     * This API allows to retrieve user identities.
     * @param id The value of _the unique id_ (required)
     * @return List&lt;Identity&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The identities associated to the user. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User authentication was not effective (e.g. not provided, invalid or expired). </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User is not allowed to perform the request. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The resource was not found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal failure of the service. </td><td>  -  </td></tr>
     </table>
     */
    public List<Identity> userIdIdentitiesGet(UUID id) throws ApiException {
        ApiResponse<List<Identity>> localVarResp = userIdIdentitiesGetWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * Retrieve User identities
     * This API allows to retrieve user identities.
     * @param id The value of _the unique id_ (required)
     * @return ApiResponse&lt;List&lt;Identity&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The identities associated to the user. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User authentication was not effective (e.g. not provided, invalid or expired). </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User is not allowed to perform the request. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The resource was not found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal failure of the service. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Identity>> userIdIdentitiesGetWithHttpInfo(UUID id) throws ApiException {
        okhttp3.Call localVarCall = userIdIdentitiesGetValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<List<Identity>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve User identities (asynchronously)
     * This API allows to retrieve user identities.
     * @param id The value of _the unique id_ (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The identities associated to the user. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User authentication was not effective (e.g. not provided, invalid or expired). </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User is not allowed to perform the request. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The resource was not found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal failure of the service. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call userIdIdentitiesGetAsync(UUID id, final ApiCallback<List<Identity>> _callback) throws ApiException {

        okhttp3.Call localVarCall = userIdIdentitiesGetValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<List<Identity>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for userIdPut
     * @param id The value of _the unique id_ (required)
     * @param user User replacing current object. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The request has been satisfyied. No output. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Result of a client passing incorrect or invalid data. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User authentication was not effective (e.g. not provided, invalid or expired). </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User is not allowed to perform the request. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The resource was not found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal failure of the service. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call userIdPutCall(UUID id, User user, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = user;

        // create path and map variables
        String localVarPath = "/user/{id}"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call userIdPutValidateBeforeCall(UUID id, User user, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling userIdPut(Async)");
        }
        
        // verify the required parameter 'user' is set
        if (user == null) {
            throw new ApiException("Missing the required parameter 'user' when calling userIdPut(Async)");
        }
        

        okhttp3.Call localVarCall = userIdPutCall(id, user, _callback);
        return localVarCall;

    }

    /**
     * Update a User
     * This API allows to update a User.
     * @param id The value of _the unique id_ (required)
     * @param user User replacing current object. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The request has been satisfyied. No output. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Result of a client passing incorrect or invalid data. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User authentication was not effective (e.g. not provided, invalid or expired). </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User is not allowed to perform the request. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The resource was not found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal failure of the service. </td><td>  -  </td></tr>
     </table>
     */
    public void userIdPut(UUID id, User user) throws ApiException {
        userIdPutWithHttpInfo(id, user);
    }

    /**
     * Update a User
     * This API allows to update a User.
     * @param id The value of _the unique id_ (required)
     * @param user User replacing current object. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The request has been satisfyied. No output. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Result of a client passing incorrect or invalid data. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User authentication was not effective (e.g. not provided, invalid or expired). </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User is not allowed to perform the request. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The resource was not found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal failure of the service. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> userIdPutWithHttpInfo(UUID id, User user) throws ApiException {
        okhttp3.Call localVarCall = userIdPutValidateBeforeCall(id, user, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Update a User (asynchronously)
     * This API allows to update a User.
     * @param id The value of _the unique id_ (required)
     * @param user User replacing current object. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The request has been satisfyied. No output. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Result of a client passing incorrect or invalid data. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User authentication was not effective (e.g. not provided, invalid or expired). </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User is not allowed to perform the request. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The resource was not found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal failure of the service. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call userIdPutAsync(UUID id, User user, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = userIdPutValidateBeforeCall(id, user, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for userIdRolePut
     * @param id The value of _the unique id_ (required)
     * @param newRole The new **role** of the User. Allowed values are **admin**, **instructor**, **signer**  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The request has been satisfyied. No output. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Result of a client passing incorrect or invalid data. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User authentication was not effective (e.g. not provided, invalid or expired). </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User is not allowed to perform the request. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The resource was not found. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Cannot satisfy the request because the resource is in an illegal status. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal failure of the service. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call userIdRolePutCall(UUID id, String newRole, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/user/{id}/role"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (newRole != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("newRole", newRole));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call userIdRolePutValidateBeforeCall(UUID id, String newRole, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling userIdRolePut(Async)");
        }
        
        // verify the required parameter 'newRole' is set
        if (newRole == null) {
            throw new ApiException("Missing the required parameter 'newRole' when calling userIdRolePut(Async)");
        }
        

        okhttp3.Call localVarCall = userIdRolePutCall(id, newRole, _callback);
        return localVarCall;

    }

    /**
     * Change the User role
     * This API allows to change the permissions associated to the users, (**capabilities**) according to predefined user roles. 
     * @param id The value of _the unique id_ (required)
     * @param newRole The new **role** of the User. Allowed values are **admin**, **instructor**, **signer**  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The request has been satisfyied. No output. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Result of a client passing incorrect or invalid data. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User authentication was not effective (e.g. not provided, invalid or expired). </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User is not allowed to perform the request. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The resource was not found. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Cannot satisfy the request because the resource is in an illegal status. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal failure of the service. </td><td>  -  </td></tr>
     </table>
     */
    public void userIdRolePut(UUID id, String newRole) throws ApiException {
        userIdRolePutWithHttpInfo(id, newRole);
    }

    /**
     * Change the User role
     * This API allows to change the permissions associated to the users, (**capabilities**) according to predefined user roles. 
     * @param id The value of _the unique id_ (required)
     * @param newRole The new **role** of the User. Allowed values are **admin**, **instructor**, **signer**  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The request has been satisfyied. No output. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Result of a client passing incorrect or invalid data. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User authentication was not effective (e.g. not provided, invalid or expired). </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User is not allowed to perform the request. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The resource was not found. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Cannot satisfy the request because the resource is in an illegal status. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal failure of the service. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> userIdRolePutWithHttpInfo(UUID id, String newRole) throws ApiException {
        okhttp3.Call localVarCall = userIdRolePutValidateBeforeCall(id, newRole, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Change the User role (asynchronously)
     * This API allows to change the permissions associated to the users, (**capabilities**) according to predefined user roles. 
     * @param id The value of _the unique id_ (required)
     * @param newRole The new **role** of the User. Allowed values are **admin**, **instructor**, **signer**  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The request has been satisfyied. No output. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Result of a client passing incorrect or invalid data. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User authentication was not effective (e.g. not provided, invalid or expired). </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User is not allowed to perform the request. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The resource was not found. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Cannot satisfy the request because the resource is in an illegal status. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal failure of the service. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call userIdRolePutAsync(UUID id, String newRole, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = userIdRolePutValidateBeforeCall(id, newRole, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for usersGet
     * @param $top A number of results to return. Applied after **$skip**  (optional)
     * @param $skip An offset into the collection of results (optional)
     * @param $count If true, the server includes the count of all the items in the response  (optional)
     * @param $orderBy An ordering definition (eg. $orderBy&#x3D;updatedAt,desc) (optional)
     * @param $filter A filter definition (eg. $filter&#x3D;name &#x3D;&#x3D; \&quot;Milk\&quot; or surname &#x3D;&#x3D; \&quot;Bread\&quot;) (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The data matching the selection parameters. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Result of a client passing incorrect or invalid data. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User authentication was not effective (e.g. not provided, invalid or expired). </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User is not allowed to perform the request. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal failure of the service. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call usersGetCall(Integer $top, Long $skip, Boolean $count, String $orderBy, String $filter, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/users";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if ($top != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$top", $top));
        }

        if ($skip != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$skip", $skip));
        }

        if ($count != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$count", $count));
        }

        if ($orderBy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$orderBy", $orderBy));
        }

        if ($filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$filter", $filter));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json", "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call usersGetValidateBeforeCall(Integer $top, Long $skip, Boolean $count, String $orderBy, String $filter, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = usersGetCall($top, $skip, $count, $orderBy, $filter, _callback);
        return localVarCall;

    }

    /**
     * Retrieve Users
     * This allows to get the list of the Users of an Organization.
     * @param $top A number of results to return. Applied after **$skip**  (optional)
     * @param $skip An offset into the collection of results (optional)
     * @param $count If true, the server includes the count of all the items in the response  (optional)
     * @param $orderBy An ordering definition (eg. $orderBy&#x3D;updatedAt,desc) (optional)
     * @param $filter A filter definition (eg. $filter&#x3D;name &#x3D;&#x3D; \&quot;Milk\&quot; or surname &#x3D;&#x3D; \&quot;Bread\&quot;) (optional)
     * @return UsersGetResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The data matching the selection parameters. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Result of a client passing incorrect or invalid data. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User authentication was not effective (e.g. not provided, invalid or expired). </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User is not allowed to perform the request. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal failure of the service. </td><td>  -  </td></tr>
     </table>
     */
    public UsersGetResponse usersGet(Integer $top, Long $skip, Boolean $count, String $orderBy, String $filter) throws ApiException {
        ApiResponse<UsersGetResponse> localVarResp = usersGetWithHttpInfo($top, $skip, $count, $orderBy, $filter);
        return localVarResp.getData();
    }

    /**
     * Retrieve Users
     * This allows to get the list of the Users of an Organization.
     * @param $top A number of results to return. Applied after **$skip**  (optional)
     * @param $skip An offset into the collection of results (optional)
     * @param $count If true, the server includes the count of all the items in the response  (optional)
     * @param $orderBy An ordering definition (eg. $orderBy&#x3D;updatedAt,desc) (optional)
     * @param $filter A filter definition (eg. $filter&#x3D;name &#x3D;&#x3D; \&quot;Milk\&quot; or surname &#x3D;&#x3D; \&quot;Bread\&quot;) (optional)
     * @return ApiResponse&lt;UsersGetResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The data matching the selection parameters. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Result of a client passing incorrect or invalid data. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User authentication was not effective (e.g. not provided, invalid or expired). </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User is not allowed to perform the request. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal failure of the service. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UsersGetResponse> usersGetWithHttpInfo(Integer $top, Long $skip, Boolean $count, String $orderBy, String $filter) throws ApiException {
        okhttp3.Call localVarCall = usersGetValidateBeforeCall($top, $skip, $count, $orderBy, $filter, null);
        Type localVarReturnType = new TypeToken<UsersGetResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve Users (asynchronously)
     * This allows to get the list of the Users of an Organization.
     * @param $top A number of results to return. Applied after **$skip**  (optional)
     * @param $skip An offset into the collection of results (optional)
     * @param $count If true, the server includes the count of all the items in the response  (optional)
     * @param $orderBy An ordering definition (eg. $orderBy&#x3D;updatedAt,desc) (optional)
     * @param $filter A filter definition (eg. $filter&#x3D;name &#x3D;&#x3D; \&quot;Milk\&quot; or surname &#x3D;&#x3D; \&quot;Bread\&quot;) (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The data matching the selection parameters. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Result of a client passing incorrect or invalid data. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User authentication was not effective (e.g. not provided, invalid or expired). </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User is not allowed to perform the request. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal failure of the service. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call usersGetAsync(Integer $top, Long $skip, Boolean $count, String $orderBy, String $filter, final ApiCallback<UsersGetResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = usersGetValidateBeforeCall($top, $skip, $count, $orderBy, $filter, _callback);
        Type localVarReturnType = new TypeToken<UsersGetResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for usersGroupsGet
     * @param $top A number of results to return. Applied after **$skip**  (optional)
     * @param $skip An offset into the collection of results (optional)
     * @param $count If true, the server includes the count of all the items in the response  (optional)
     * @param $orderBy An ordering definition (eg. $orderBy&#x3D;updatedAt,desc) (optional)
     * @param $filter A filter definition (eg. $filter&#x3D;name &#x3D;&#x3D; \&quot;Milk\&quot; or surname &#x3D;&#x3D; \&quot;Bread\&quot;) (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The data matching the selection parameters. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Result of a client passing incorrect or invalid data. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User authentication was not effective (e.g. not provided, invalid or expired). </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User is not allowed to perform the request. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal failure of the service. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call usersGroupsGetCall(Integer $top, Long $skip, Boolean $count, String $orderBy, String $filter, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/users/groups";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if ($top != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$top", $top));
        }

        if ($skip != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$skip", $skip));
        }

        if ($count != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$count", $count));
        }

        if ($orderBy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$orderBy", $orderBy));
        }

        if ($filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$filter", $filter));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json", "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call usersGroupsGetValidateBeforeCall(Integer $top, Long $skip, Boolean $count, String $orderBy, String $filter, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = usersGroupsGetCall($top, $skip, $count, $orderBy, $filter, _callback);
        return localVarCall;

    }

    /**
     * Retrieve UserGroups
     * This API allows to get the list of the UserGroups.
     * @param $top A number of results to return. Applied after **$skip**  (optional)
     * @param $skip An offset into the collection of results (optional)
     * @param $count If true, the server includes the count of all the items in the response  (optional)
     * @param $orderBy An ordering definition (eg. $orderBy&#x3D;updatedAt,desc) (optional)
     * @param $filter A filter definition (eg. $filter&#x3D;name &#x3D;&#x3D; \&quot;Milk\&quot; or surname &#x3D;&#x3D; \&quot;Bread\&quot;) (optional)
     * @return UserGroupGetResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The data matching the selection parameters. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Result of a client passing incorrect or invalid data. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User authentication was not effective (e.g. not provided, invalid or expired). </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User is not allowed to perform the request. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal failure of the service. </td><td>  -  </td></tr>
     </table>
     */
    public UserGroupGetResponse usersGroupsGet(Integer $top, Long $skip, Boolean $count, String $orderBy, String $filter) throws ApiException {
        ApiResponse<UserGroupGetResponse> localVarResp = usersGroupsGetWithHttpInfo($top, $skip, $count, $orderBy, $filter);
        return localVarResp.getData();
    }

    /**
     * Retrieve UserGroups
     * This API allows to get the list of the UserGroups.
     * @param $top A number of results to return. Applied after **$skip**  (optional)
     * @param $skip An offset into the collection of results (optional)
     * @param $count If true, the server includes the count of all the items in the response  (optional)
     * @param $orderBy An ordering definition (eg. $orderBy&#x3D;updatedAt,desc) (optional)
     * @param $filter A filter definition (eg. $filter&#x3D;name &#x3D;&#x3D; \&quot;Milk\&quot; or surname &#x3D;&#x3D; \&quot;Bread\&quot;) (optional)
     * @return ApiResponse&lt;UserGroupGetResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The data matching the selection parameters. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Result of a client passing incorrect or invalid data. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User authentication was not effective (e.g. not provided, invalid or expired). </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User is not allowed to perform the request. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal failure of the service. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UserGroupGetResponse> usersGroupsGetWithHttpInfo(Integer $top, Long $skip, Boolean $count, String $orderBy, String $filter) throws ApiException {
        okhttp3.Call localVarCall = usersGroupsGetValidateBeforeCall($top, $skip, $count, $orderBy, $filter, null);
        Type localVarReturnType = new TypeToken<UserGroupGetResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve UserGroups (asynchronously)
     * This API allows to get the list of the UserGroups.
     * @param $top A number of results to return. Applied after **$skip**  (optional)
     * @param $skip An offset into the collection of results (optional)
     * @param $count If true, the server includes the count of all the items in the response  (optional)
     * @param $orderBy An ordering definition (eg. $orderBy&#x3D;updatedAt,desc) (optional)
     * @param $filter A filter definition (eg. $filter&#x3D;name &#x3D;&#x3D; \&quot;Milk\&quot; or surname &#x3D;&#x3D; \&quot;Bread\&quot;) (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The data matching the selection parameters. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Result of a client passing incorrect or invalid data. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User authentication was not effective (e.g. not provided, invalid or expired). </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User is not allowed to perform the request. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal failure of the service. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call usersGroupsGetAsync(Integer $top, Long $skip, Boolean $count, String $orderBy, String $filter, final ApiCallback<UserGroupGetResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = usersGroupsGetValidateBeforeCall($top, $skip, $count, $orderBy, $filter, _callback);
        Type localVarReturnType = new TypeToken<UserGroupGetResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for usersGroupsPost
     * @param userGroup UserGroup list to be added. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The request has been satisfyied. No output. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Result of a client passing incorrect or invalid data. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User authentication was not effective (e.g. not provided, invalid or expired). </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User is not allowed to perform the request. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal failure of the service. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call usersGroupsPostCall(List<UserGroup> userGroup, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = userGroup;

        // create path and map variables
        String localVarPath = "/users/groups";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call usersGroupsPostValidateBeforeCall(List<UserGroup> userGroup, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'userGroup' is set
        if (userGroup == null) {
            throw new ApiException("Missing the required parameter 'userGroup' when calling usersGroupsPost(Async)");
        }
        

        okhttp3.Call localVarCall = usersGroupsPostCall(userGroup, _callback);
        return localVarCall;

    }

    /**
     * Create a new UserGroups
     * This API allows to create a new UserGroups.
     * @param userGroup UserGroup list to be added. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The request has been satisfyied. No output. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Result of a client passing incorrect or invalid data. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User authentication was not effective (e.g. not provided, invalid or expired). </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User is not allowed to perform the request. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal failure of the service. </td><td>  -  </td></tr>
     </table>
     */
    public void usersGroupsPost(List<UserGroup> userGroup) throws ApiException {
        usersGroupsPostWithHttpInfo(userGroup);
    }

    /**
     * Create a new UserGroups
     * This API allows to create a new UserGroups.
     * @param userGroup UserGroup list to be added. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The request has been satisfyied. No output. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Result of a client passing incorrect or invalid data. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User authentication was not effective (e.g. not provided, invalid or expired). </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User is not allowed to perform the request. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal failure of the service. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> usersGroupsPostWithHttpInfo(List<UserGroup> userGroup) throws ApiException {
        okhttp3.Call localVarCall = usersGroupsPostValidateBeforeCall(userGroup, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Create a new UserGroups (asynchronously)
     * This API allows to create a new UserGroups.
     * @param userGroup UserGroup list to be added. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The request has been satisfyied. No output. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Result of a client passing incorrect or invalid data. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User authentication was not effective (e.g. not provided, invalid or expired). </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User is not allowed to perform the request. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal failure of the service. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call usersGroupsPostAsync(List<UserGroup> userGroup, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = usersGroupsPostValidateBeforeCall(userGroup, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for usersPost
     * @param createUserRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The request has been satisfyied, new resource created. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Result of a client passing incorrect or invalid data. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User authentication was not effective (e.g. not provided, invalid or expired). </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User is not allowed to perform the request. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal failure of the service. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call usersPostCall(CreateUserRequest createUserRequest, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = createUserRequest;

        // create path and map variables
        String localVarPath = "/users";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call usersPostValidateBeforeCall(CreateUserRequest createUserRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'createUserRequest' is set
        if (createUserRequest == null) {
            throw new ApiException("Missing the required parameter 'createUserRequest' when calling usersPost(Async)");
        }
        

        okhttp3.Call localVarCall = usersPostCall(createUserRequest, _callback);
        return localVarCall;

    }

    /**
     * Create a new User
     * This API allows to create a new User.
     * @param createUserRequest  (required)
     * @return UUID
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The request has been satisfyied, new resource created. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Result of a client passing incorrect or invalid data. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User authentication was not effective (e.g. not provided, invalid or expired). </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User is not allowed to perform the request. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal failure of the service. </td><td>  -  </td></tr>
     </table>
     */
    public UUID usersPost(CreateUserRequest createUserRequest) throws ApiException {
        ApiResponse<UUID> localVarResp = usersPostWithHttpInfo(createUserRequest);
        return localVarResp.getData();
    }

    /**
     * Create a new User
     * This API allows to create a new User.
     * @param createUserRequest  (required)
     * @return ApiResponse&lt;UUID&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The request has been satisfyied, new resource created. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Result of a client passing incorrect or invalid data. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User authentication was not effective (e.g. not provided, invalid or expired). </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User is not allowed to perform the request. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal failure of the service. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UUID> usersPostWithHttpInfo(CreateUserRequest createUserRequest) throws ApiException {
        okhttp3.Call localVarCall = usersPostValidateBeforeCall(createUserRequest, null);
        Type localVarReturnType = new TypeToken<UUID>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a new User (asynchronously)
     * This API allows to create a new User.
     * @param createUserRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The request has been satisfyied, new resource created. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Result of a client passing incorrect or invalid data. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User authentication was not effective (e.g. not provided, invalid or expired). </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User is not allowed to perform the request. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal failure of the service. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call usersPostAsync(CreateUserRequest createUserRequest, final ApiCallback<UUID> _callback) throws ApiException {

        okhttp3.Call localVarCall = usersPostValidateBeforeCall(createUserRequest, _callback);
        Type localVarReturnType = new TypeToken<UUID>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
