/*
 * Signing Today Web
 * *Signing Today* is the perfect Digital Signature Gateway. Whenever in Your workflow You need to add one or more Digital Signatures to Your document, *Signing Today* is the right choice. You prepare Your documents, *Signing Today* takes care of all the rest: send invitations (`signature tickets`) to signers, collects their signatures, send You back the signed document. Integrating *Signing Today* in Your existing applications is very easy. Just follow these API specifications and get inspired by the many examples presented hereafter. 
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package signingToday.client.api;

import signingToday.client.ApiCallback;
import signingToday.client.ApiClient;
import signingToday.client.ApiException;
import signingToday.client.ApiResponse;
import signingToday.client.Configuration;
import signingToday.client.Pair;
import signingToday.client.ProgressRequestBody;
import signingToday.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import signingToday.client.model.CreateDigitalSignatureTransaction;
import signingToday.client.model.DigitalSignatureTransaction;
import signingToday.client.model.ErrorResponse;
import signingToday.client.model.InstantiateDSTTemplate;
import signingToday.client.model.RobotAuthenticationToken;
import signingToday.client.model.RobotConfiguration;
import signingToday.client.model.ServiceFailureResponse;
import java.util.UUID;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class RobotsApi {
    private ApiClient localVarApiClient;

    public RobotsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public RobotsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for robotAuthenticationDelete
     * @param username The _username_ associated to the account (optional)
     * @param domain The _domain_ associated to the account (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The request has been satisfyied. No output. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User authentication was not effective (e.g. not provided, invalid or expired). </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal failure of the service. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call robotAuthenticationDeleteCall(String username, String domain, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/robot/authentication";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (username != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("username", username));
        }

        if (domain != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("domain", domain));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call robotAuthenticationDeleteValidateBeforeCall(String username, String domain, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = robotAuthenticationDeleteCall(username, domain, _callback);
        return localVarCall;

    }

    /**
     * Clear a Robot authentication lifetime token
     * This API allows to clear the Robot authentication lifetime token.
     * @param username The _username_ associated to the account (optional)
     * @param domain The _domain_ associated to the account (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The request has been satisfyied. No output. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User authentication was not effective (e.g. not provided, invalid or expired). </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal failure of the service. </td><td>  -  </td></tr>
     </table>
     */
    public void robotAuthenticationDelete(String username, String domain) throws ApiException {
        robotAuthenticationDeleteWithHttpInfo(username, domain);
    }

    /**
     * Clear a Robot authentication lifetime token
     * This API allows to clear the Robot authentication lifetime token.
     * @param username The _username_ associated to the account (optional)
     * @param domain The _domain_ associated to the account (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The request has been satisfyied. No output. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User authentication was not effective (e.g. not provided, invalid or expired). </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal failure of the service. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> robotAuthenticationDeleteWithHttpInfo(String username, String domain) throws ApiException {
        okhttp3.Call localVarCall = robotAuthenticationDeleteValidateBeforeCall(username, domain, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Clear a Robot authentication lifetime token (asynchronously)
     * This API allows to clear the Robot authentication lifetime token.
     * @param username The _username_ associated to the account (optional)
     * @param domain The _domain_ associated to the account (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The request has been satisfyied. No output. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User authentication was not effective (e.g. not provided, invalid or expired). </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal failure of the service. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call robotAuthenticationDeleteAsync(String username, String domain, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = robotAuthenticationDeleteValidateBeforeCall(username, domain, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for robotAuthenticationGet
     * @param username The _username_ associated to the account (optional)
     * @param domain The _domain_ associated to the account (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The lifetime robot token. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User authentication was not effective (e.g. not provided, invalid or expired). </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal failure of the service. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call robotAuthenticationGetCall(String username, String domain, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/robot/authentication";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (username != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("username", username));
        }

        if (domain != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("domain", domain));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json", "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call robotAuthenticationGetValidateBeforeCall(String username, String domain, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = robotAuthenticationGetCall(username, domain, _callback);
        return localVarCall;

    }

    /**
     * Retrieve the Robot authentication lifetime token
     * This API allows to generate or retrieves the Robot authentication lifetime token for the specified robot account, or the current logged in account. 
     * @param username The _username_ associated to the account (optional)
     * @param domain The _domain_ associated to the account (optional)
     * @return RobotAuthenticationToken
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The lifetime robot token. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User authentication was not effective (e.g. not provided, invalid or expired). </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal failure of the service. </td><td>  -  </td></tr>
     </table>
     */
    public RobotAuthenticationToken robotAuthenticationGet(String username, String domain) throws ApiException {
        ApiResponse<RobotAuthenticationToken> localVarResp = robotAuthenticationGetWithHttpInfo(username, domain);
        return localVarResp.getData();
    }

    /**
     * Retrieve the Robot authentication lifetime token
     * This API allows to generate or retrieves the Robot authentication lifetime token for the specified robot account, or the current logged in account. 
     * @param username The _username_ associated to the account (optional)
     * @param domain The _domain_ associated to the account (optional)
     * @return ApiResponse&lt;RobotAuthenticationToken&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The lifetime robot token. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User authentication was not effective (e.g. not provided, invalid or expired). </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal failure of the service. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RobotAuthenticationToken> robotAuthenticationGetWithHttpInfo(String username, String domain) throws ApiException {
        okhttp3.Call localVarCall = robotAuthenticationGetValidateBeforeCall(username, domain, null);
        Type localVarReturnType = new TypeToken<RobotAuthenticationToken>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve the Robot authentication lifetime token (asynchronously)
     * This API allows to generate or retrieves the Robot authentication lifetime token for the specified robot account, or the current logged in account. 
     * @param username The _username_ associated to the account (optional)
     * @param domain The _domain_ associated to the account (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The lifetime robot token. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User authentication was not effective (e.g. not provided, invalid or expired). </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal failure of the service. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call robotAuthenticationGetAsync(String username, String domain, final ApiCallback<RobotAuthenticationToken> _callback) throws ApiException {

        okhttp3.Call localVarCall = robotAuthenticationGetValidateBeforeCall(username, domain, _callback);
        Type localVarReturnType = new TypeToken<RobotAuthenticationToken>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for robotConfigurationGet
     * @param username The _username_ associated to the account (optional)
     * @param domain The _domain_ associated to the account (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The Robot configuration. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User authentication was not effective (e.g. not provided, invalid or expired). </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal failure of the service. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call robotConfigurationGetCall(String username, String domain, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/robot/configuration";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (username != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("username", username));
        }

        if (domain != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("domain", domain));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json", "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call robotConfigurationGetValidateBeforeCall(String username, String domain, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = robotConfigurationGetCall(username, domain, _callback);
        return localVarCall;

    }

    /**
     * Retrieve the Robot configuration
     * This API allows to retrieve the Robot configuration. 
     * @param username The _username_ associated to the account (optional)
     * @param domain The _domain_ associated to the account (optional)
     * @return RobotConfiguration
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The Robot configuration. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User authentication was not effective (e.g. not provided, invalid or expired). </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal failure of the service. </td><td>  -  </td></tr>
     </table>
     */
    public RobotConfiguration robotConfigurationGet(String username, String domain) throws ApiException {
        ApiResponse<RobotConfiguration> localVarResp = robotConfigurationGetWithHttpInfo(username, domain);
        return localVarResp.getData();
    }

    /**
     * Retrieve the Robot configuration
     * This API allows to retrieve the Robot configuration. 
     * @param username The _username_ associated to the account (optional)
     * @param domain The _domain_ associated to the account (optional)
     * @return ApiResponse&lt;RobotConfiguration&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The Robot configuration. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User authentication was not effective (e.g. not provided, invalid or expired). </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal failure of the service. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RobotConfiguration> robotConfigurationGetWithHttpInfo(String username, String domain) throws ApiException {
        okhttp3.Call localVarCall = robotConfigurationGetValidateBeforeCall(username, domain, null);
        Type localVarReturnType = new TypeToken<RobotConfiguration>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve the Robot configuration (asynchronously)
     * This API allows to retrieve the Robot configuration. 
     * @param username The _username_ associated to the account (optional)
     * @param domain The _domain_ associated to the account (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The Robot configuration. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User authentication was not effective (e.g. not provided, invalid or expired). </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal failure of the service. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call robotConfigurationGetAsync(String username, String domain, final ApiCallback<RobotConfiguration> _callback) throws ApiException {

        okhttp3.Call localVarCall = robotConfigurationGetValidateBeforeCall(username, domain, _callback);
        Type localVarReturnType = new TypeToken<RobotConfiguration>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for robotDSTsPost
     * @param createDigitalSignatureTransaction description (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The new DST. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Result of a client passing incorrect or invalid data. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User authentication was not effective (e.g. not provided, invalid or expired). </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User is not allowed to perform the request. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The resource was not found. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Cannot satisfy the request because the resource is in an illegal status. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal failure of the service. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call robotDSTsPostCall(CreateDigitalSignatureTransaction createDigitalSignatureTransaction, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = createDigitalSignatureTransaction;

        // create path and map variables
        String localVarPath = "/robot/DSTs";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json", "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call robotDSTsPostValidateBeforeCall(CreateDigitalSignatureTransaction createDigitalSignatureTransaction, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'createDigitalSignatureTransaction' is set
        if (createDigitalSignatureTransaction == null) {
            throw new ApiException("Missing the required parameter 'createDigitalSignatureTransaction' when calling robotDSTsPost(Async)");
        }
        

        okhttp3.Call localVarCall = robotDSTsPostCall(createDigitalSignatureTransaction, _callback);
        return localVarCall;

    }

    /**
     * Create a new DST in one call
     * This API allows to create a new DST with a more convenient interface for client applications. The purpose is to provide a method for the creation of a DST in order to semplify the integration into third part applications. 
     * @param createDigitalSignatureTransaction description (required)
     * @return DigitalSignatureTransaction
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The new DST. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Result of a client passing incorrect or invalid data. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User authentication was not effective (e.g. not provided, invalid or expired). </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User is not allowed to perform the request. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The resource was not found. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Cannot satisfy the request because the resource is in an illegal status. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal failure of the service. </td><td>  -  </td></tr>
     </table>
     */
    public DigitalSignatureTransaction robotDSTsPost(CreateDigitalSignatureTransaction createDigitalSignatureTransaction) throws ApiException {
        ApiResponse<DigitalSignatureTransaction> localVarResp = robotDSTsPostWithHttpInfo(createDigitalSignatureTransaction);
        return localVarResp.getData();
    }

    /**
     * Create a new DST in one call
     * This API allows to create a new DST with a more convenient interface for client applications. The purpose is to provide a method for the creation of a DST in order to semplify the integration into third part applications. 
     * @param createDigitalSignatureTransaction description (required)
     * @return ApiResponse&lt;DigitalSignatureTransaction&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The new DST. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Result of a client passing incorrect or invalid data. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User authentication was not effective (e.g. not provided, invalid or expired). </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User is not allowed to perform the request. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The resource was not found. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Cannot satisfy the request because the resource is in an illegal status. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal failure of the service. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DigitalSignatureTransaction> robotDSTsPostWithHttpInfo(CreateDigitalSignatureTransaction createDigitalSignatureTransaction) throws ApiException {
        okhttp3.Call localVarCall = robotDSTsPostValidateBeforeCall(createDigitalSignatureTransaction, null);
        Type localVarReturnType = new TypeToken<DigitalSignatureTransaction>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a new DST in one call (asynchronously)
     * This API allows to create a new DST with a more convenient interface for client applications. The purpose is to provide a method for the creation of a DST in order to semplify the integration into third part applications. 
     * @param createDigitalSignatureTransaction description (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The new DST. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Result of a client passing incorrect or invalid data. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User authentication was not effective (e.g. not provided, invalid or expired). </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User is not allowed to perform the request. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The resource was not found. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Cannot satisfy the request because the resource is in an illegal status. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal failure of the service. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call robotDSTsPostAsync(CreateDigitalSignatureTransaction createDigitalSignatureTransaction, final ApiCallback<DigitalSignatureTransaction> _callback) throws ApiException {

        okhttp3.Call localVarCall = robotDSTsPostValidateBeforeCall(createDigitalSignatureTransaction, _callback);
        Type localVarReturnType = new TypeToken<DigitalSignatureTransaction>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for robotIdInstantiatePost
     * @param id The value of _the unique id_ (required)
     * @param instantiateDSTTemplate  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The new DST that has been generated as an instance of the template. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User authentication was not effective (e.g. not provided, invalid or expired). </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User is not allowed to perform the request. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The resource was not found. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Cannot satisfy the request because the resource is in an illegal status. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal failure of the service. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call robotIdInstantiatePostCall(UUID id, InstantiateDSTTemplate instantiateDSTTemplate, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = instantiateDSTTemplate;

        // create path and map variables
        String localVarPath = "/robot/{id}/instantiate"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json", "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call robotIdInstantiatePostValidateBeforeCall(UUID id, InstantiateDSTTemplate instantiateDSTTemplate, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling robotIdInstantiatePost(Async)");
        }
        
        // verify the required parameter 'instantiateDSTTemplate' is set
        if (instantiateDSTTemplate == null) {
            throw new ApiException("Missing the required parameter 'instantiateDSTTemplate' when calling robotIdInstantiatePost(Async)");
        }
        

        okhttp3.Call localVarCall = robotIdInstantiatePostCall(id, instantiateDSTTemplate, _callback);
        return localVarCall;

    }

    /**
     * Instantiate a DST from a template by robot
     * This API allows to instantiate a DST from a template patching parts of its data structure. 
     * @param id The value of _the unique id_ (required)
     * @param instantiateDSTTemplate  (required)
     * @return DigitalSignatureTransaction
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The new DST that has been generated as an instance of the template. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User authentication was not effective (e.g. not provided, invalid or expired). </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User is not allowed to perform the request. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The resource was not found. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Cannot satisfy the request because the resource is in an illegal status. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal failure of the service. </td><td>  -  </td></tr>
     </table>
     */
    public DigitalSignatureTransaction robotIdInstantiatePost(UUID id, InstantiateDSTTemplate instantiateDSTTemplate) throws ApiException {
        ApiResponse<DigitalSignatureTransaction> localVarResp = robotIdInstantiatePostWithHttpInfo(id, instantiateDSTTemplate);
        return localVarResp.getData();
    }

    /**
     * Instantiate a DST from a template by robot
     * This API allows to instantiate a DST from a template patching parts of its data structure. 
     * @param id The value of _the unique id_ (required)
     * @param instantiateDSTTemplate  (required)
     * @return ApiResponse&lt;DigitalSignatureTransaction&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The new DST that has been generated as an instance of the template. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User authentication was not effective (e.g. not provided, invalid or expired). </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User is not allowed to perform the request. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The resource was not found. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Cannot satisfy the request because the resource is in an illegal status. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal failure of the service. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DigitalSignatureTransaction> robotIdInstantiatePostWithHttpInfo(UUID id, InstantiateDSTTemplate instantiateDSTTemplate) throws ApiException {
        okhttp3.Call localVarCall = robotIdInstantiatePostValidateBeforeCall(id, instantiateDSTTemplate, null);
        Type localVarReturnType = new TypeToken<DigitalSignatureTransaction>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Instantiate a DST from a template by robot (asynchronously)
     * This API allows to instantiate a DST from a template patching parts of its data structure. 
     * @param id The value of _the unique id_ (required)
     * @param instantiateDSTTemplate  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The new DST that has been generated as an instance of the template. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User authentication was not effective (e.g. not provided, invalid or expired). </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User is not allowed to perform the request. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The resource was not found. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Cannot satisfy the request because the resource is in an illegal status. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal failure of the service. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call robotIdInstantiatePostAsync(UUID id, InstantiateDSTTemplate instantiateDSTTemplate, final ApiCallback<DigitalSignatureTransaction> _callback) throws ApiException {

        okhttp3.Call localVarCall = robotIdInstantiatePostValidateBeforeCall(id, instantiateDSTTemplate, _callback);
        Type localVarReturnType = new TypeToken<DigitalSignatureTransaction>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
