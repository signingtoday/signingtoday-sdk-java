/*
 * Signing Today Web
 * *Signing Today* is the perfect Digital Signature Gateway. Whenever in Your workflow You need to add one or more Digital Signatures to Your document, *Signing Today* is the right choice. You prepare Your documents, *Signing Today* takes care of all the rest: send invitations (`signature tickets`) to signers, collects their signatures, send You back the signed document. Integrating *Signing Today* in Your existing applications is very easy. Just follow these API specifications and get inspired by the many examples presented hereafter. 
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package signingToday.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.File;
import java.io.IOException;

/**
 * CreateDocumentSource
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2020-03-24T08:13:36.809Z[GMT]")
public class CreateDocumentSource {
  /**
   * Gets or Sets type
   */
  @JsonAdapter(TypeEnum.Adapter.class)
  public enum TypeEnum {
    EMBEDDED("Embedded"),
    
    URL("URL");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TypeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private TypeEnum type;

  public static final String SERIALIZED_NAME_EMBEDDED_DATA = "embeddedData";
  @SerializedName(SERIALIZED_NAME_EMBEDDED_DATA)
  private File embeddedData;

  public static final String SERIALIZED_NAME_SOURCE_U_R_L = "sourceURL";
  @SerializedName(SERIALIZED_NAME_SOURCE_U_R_L)
  private String sourceURL;


  public CreateDocumentSource type(TypeEnum type) {
    
    this.type = type;
    return this;
  }

   /**
   * Get type
   * @return type
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "Embedded", value = "")

  public TypeEnum getType() {
    return type;
  }


  public void setType(TypeEnum type) {
    this.type = type;
  }


  public CreateDocumentSource embeddedData(File embeddedData) {
    
    this.embeddedData = embeddedData;
    return this;
  }

   /**
   * Get embeddedData
   * @return embeddedData
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public File getEmbeddedData() {
    return embeddedData;
  }


  public void setEmbeddedData(File embeddedData) {
    this.embeddedData = embeddedData;
  }


  public CreateDocumentSource sourceURL(String sourceURL) {
    
    this.sourceURL = sourceURL;
    return this;
  }

   /**
   * Get sourceURL
   * @return sourceURL
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getSourceURL() {
    return sourceURL;
  }


  public void setSourceURL(String sourceURL) {
    this.sourceURL = sourceURL;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateDocumentSource createDocumentSource = (CreateDocumentSource) o;
    return Objects.equals(this.type, createDocumentSource.type) &&
        Objects.equals(this.embeddedData, createDocumentSource.embeddedData) &&
        Objects.equals(this.sourceURL, createDocumentSource.sourceURL);
  }

  @Override
  public int hashCode() {
    return Objects.hash(type, embeddedData, sourceURL);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateDocumentSource {\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    embeddedData: ").append(toIndentedString(embeddedData)).append("\n");
    sb.append("    sourceURL: ").append(toIndentedString(sourceURL)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

