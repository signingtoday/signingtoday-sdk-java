/*
 * Signing Today Web
 * *Signing Today* is the perfect Digital Signature Gateway. Whenever in Your workflow You need to add one or more Digital Signatures to Your document, *Signing Today* is the right choice. You prepare Your documents, *Signing Today* takes care of all the rest: send invitations (`signature tickets`) to signers, collects their signatures, send You back the signed document. Integrating *Signing Today* in Your existing applications is very easy. Just follow these API specifications and get inspired by the many examples presented hereafter. 
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package signingToday.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import signingToday.client.model.SignatureRestriction;

/**
 * The association with the document is hold in the extraData of the FillableForm.
 */
@ApiModel(description = "The association with the document is hold in the extraData of the FillableForm.")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2020-03-24T08:13:36.809Z[GMT]")
public class SignatureRequest {
  public static final String SERIALIZED_NAME_INSTANCE_ID = "_instance_id";
  @SerializedName(SERIALIZED_NAME_INSTANCE_ID)
  private Long instanceId;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Integer id;

  public static final String SERIALIZED_NAME_REASON = "reason";
  @SerializedName(SERIALIZED_NAME_REASON)
  private String reason;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_SIGNER_ID = "signerId";
  @SerializedName(SERIALIZED_NAME_SIGNER_ID)
  private Integer signerId;

  /**
   * Gets or Sets signProfile
   */
  @JsonAdapter(SignProfileEnum.Adapter.class)
  public enum SignProfileEnum {
    CADES("CAdES"),
    
    PADES("PAdES");

    private String value;

    SignProfileEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SignProfileEnum fromValue(String value) {
      for (SignProfileEnum b : SignProfileEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SignProfileEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SignProfileEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SignProfileEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SignProfileEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_SIGN_PROFILE = "signProfile";
  @SerializedName(SERIALIZED_NAME_SIGN_PROFILE)
  private SignProfileEnum signProfile;

  public static final String SERIALIZED_NAME_WITH_TIMESTAMP = "withTimestamp";
  @SerializedName(SERIALIZED_NAME_WITH_TIMESTAMP)
  private Boolean withTimestamp;

  public static final String SERIALIZED_NAME_DECLINABLE = "declinable";
  @SerializedName(SERIALIZED_NAME_DECLINABLE)
  private Boolean declinable;

  public static final String SERIALIZED_NAME_RESTRICTIONS = "restrictions";
  @SerializedName(SERIALIZED_NAME_RESTRICTIONS)
  private List<SignatureRestriction> restrictions = null;

  public static final String SERIALIZED_NAME_EXTRA_DATA = "extraData";
  @SerializedName(SERIALIZED_NAME_EXTRA_DATA)
  private Map<String, Object> extraData = null;


   /**
   * It is a reference for internal use
   * @return instanceId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "1", value = "It is a reference for internal use")

  public Long getInstanceId() {
    return instanceId;
  }




  public SignatureRequest id(Integer id) {
    
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "3", value = "")

  public Integer getId() {
    return id;
  }


  public void setId(Integer id) {
    this.id = id;
  }


  public SignatureRequest reason(String reason) {
    
    this.reason = reason;
    return this;
  }

   /**
   * Get reason
   * @return reason
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "As the Buyer", value = "")

  public String getReason() {
    return reason;
  }


  public void setReason(String reason) {
    this.reason = reason;
  }


  public SignatureRequest description(String description) {
    
    this.description = description;
    return this;
  }

   /**
   * Get description
   * @return description
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "The proponent", value = "")

  public String getDescription() {
    return description;
  }


  public void setDescription(String description) {
    this.description = description;
  }


  public SignatureRequest signerId(Integer signerId) {
    
    this.signerId = signerId;
    return this;
  }

   /**
   * Get signerId
   * @return signerId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "2", value = "")

  public Integer getSignerId() {
    return signerId;
  }


  public void setSignerId(Integer signerId) {
    this.signerId = signerId;
  }


  public SignatureRequest signProfile(SignProfileEnum signProfile) {
    
    this.signProfile = signProfile;
    return this;
  }

   /**
   * Get signProfile
   * @return signProfile
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "PAdES", value = "")

  public SignProfileEnum getSignProfile() {
    return signProfile;
  }


  public void setSignProfile(SignProfileEnum signProfile) {
    this.signProfile = signProfile;
  }


  public SignatureRequest withTimestamp(Boolean withTimestamp) {
    
    this.withTimestamp = withTimestamp;
    return this;
  }

   /**
   * Get withTimestamp
   * @return withTimestamp
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "true", value = "")

  public Boolean getWithTimestamp() {
    return withTimestamp;
  }


  public void setWithTimestamp(Boolean withTimestamp) {
    this.withTimestamp = withTimestamp;
  }


  public SignatureRequest declinable(Boolean declinable) {
    
    this.declinable = declinable;
    return this;
  }

   /**
   * Get declinable
   * @return declinable
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "false", value = "")

  public Boolean getDeclinable() {
    return declinable;
  }


  public void setDeclinable(Boolean declinable) {
    this.declinable = declinable;
  }


  public SignatureRequest restrictions(List<SignatureRestriction> restrictions) {
    
    this.restrictions = restrictions;
    return this;
  }

  public SignatureRequest addRestrictionsItem(SignatureRestriction restrictionsItem) {
    if (this.restrictions == null) {
      this.restrictions = new ArrayList<SignatureRestriction>();
    }
    this.restrictions.add(restrictionsItem);
    return this;
  }

   /**
   * Get restrictions
   * @return restrictions
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<SignatureRestriction> getRestrictions() {
    return restrictions;
  }


  public void setRestrictions(List<SignatureRestriction> restrictions) {
    this.restrictions = restrictions;
  }


  public SignatureRequest extraData(Map<String, Object> extraData) {
    
    this.extraData = extraData;
    return this;
  }

  public SignatureRequest putExtraDataItem(String key, Object extraDataItem) {
    if (this.extraData == null) {
      this.extraData = new HashMap<String, Object>();
    }
    this.extraData.put(key, extraDataItem);
    return this;
  }

   /**
   * Get extraData
   * @return extraData
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "{\"st_ticketUrl\":\"http://signing.today/ticket/8bd4aead-ad37-42bc-b3b0-22ce3d1c9e79\"}", value = "")

  public Map<String, Object> getExtraData() {
    return extraData;
  }


  public void setExtraData(Map<String, Object> extraData) {
    this.extraData = extraData;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SignatureRequest signatureRequest = (SignatureRequest) o;
    return Objects.equals(this.instanceId, signatureRequest.instanceId) &&
        Objects.equals(this.id, signatureRequest.id) &&
        Objects.equals(this.reason, signatureRequest.reason) &&
        Objects.equals(this.description, signatureRequest.description) &&
        Objects.equals(this.signerId, signatureRequest.signerId) &&
        Objects.equals(this.signProfile, signatureRequest.signProfile) &&
        Objects.equals(this.withTimestamp, signatureRequest.withTimestamp) &&
        Objects.equals(this.declinable, signatureRequest.declinable) &&
        Objects.equals(this.restrictions, signatureRequest.restrictions) &&
        Objects.equals(this.extraData, signatureRequest.extraData);
  }

  @Override
  public int hashCode() {
    return Objects.hash(instanceId, id, reason, description, signerId, signProfile, withTimestamp, declinable, restrictions, extraData);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SignatureRequest {\n");
    sb.append("    instanceId: ").append(toIndentedString(instanceId)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    reason: ").append(toIndentedString(reason)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    signerId: ").append(toIndentedString(signerId)).append("\n");
    sb.append("    signProfile: ").append(toIndentedString(signProfile)).append("\n");
    sb.append("    withTimestamp: ").append(toIndentedString(withTimestamp)).append("\n");
    sb.append("    declinable: ").append(toIndentedString(declinable)).append("\n");
    sb.append("    restrictions: ").append(toIndentedString(restrictions)).append("\n");
    sb.append("    extraData: ").append(toIndentedString(extraData)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

