/*
 * Signing Today Web
 * *Signing Today* is the perfect Digital Signature Gateway. Whenever in Your workflow You need to add one or more Digital Signatures to Your document, *Signing Today* is the right choice. You prepare Your documents, *Signing Today* takes care of all the rest: send invitations (`signature tickets`) to signers, collects their signatures, send You back the signed document. Integrating *Signing Today* in Your existing applications is very easy. Just follow these API specifications and get inspired by the many examples presented hereafter. 
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package signingToday.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.UUID;
import signingToday.client.model.FillableForm;
import signingToday.client.model.SignatureRequest;
import signingToday.client.model.SignersGroup;

/**
 * Document
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2020-03-24T08:13:36.809Z[GMT]")
public class Document {
  public static final String SERIALIZED_NAME_INSTANCE_ID = "_instance_id";
  @SerializedName(SERIALIZED_NAME_INSTANCE_ID)
  private Long instanceId;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Integer id;

  public static final String SERIALIZED_NAME_PLAIN_DOCUMENT_UUID = "plainDocumentUuid";
  @SerializedName(SERIALIZED_NAME_PLAIN_DOCUMENT_UUID)
  private UUID plainDocumentUuid;

  public static final String SERIALIZED_NAME_FILLED_DOCUMENT_UUID = "filledDocumentUuid";
  @SerializedName(SERIALIZED_NAME_FILLED_DOCUMENT_UUID)
  private UUID filledDocumentUuid;

  public static final String SERIALIZED_NAME_SIGNED_DOCUMENT_UUID = "signedDocumentUuid";
  @SerializedName(SERIALIZED_NAME_SIGNED_DOCUMENT_UUID)
  private UUID signedDocumentUuid;

  /**
   * The status of the _Document_, which can be: - \&quot;plain\&quot;: The document has been correctly updated by the user - \&quot;filled\&quot;: The document has been filled - \&quot;signed\&quot;: The document has been signed 
   */
  @JsonAdapter(StatusEnum.Adapter.class)
  public enum StatusEnum {
    PLAIN("plain"),
    
    FILLED("filled"),
    
    SIGNED("signed");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StatusEnum fromValue(String value) {
      for (StatusEnum b : StatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StatusEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private StatusEnum status;

  public static final String SERIALIZED_NAME_FORMS = "forms";
  @SerializedName(SERIALIZED_NAME_FORMS)
  private List<FillableForm> forms = null;

  public static final String SERIALIZED_NAME_SIGNATURE_REQUESTS = "signatureRequests";
  @SerializedName(SERIALIZED_NAME_SIGNATURE_REQUESTS)
  private List<SignatureRequest> signatureRequests = null;

  public static final String SERIALIZED_NAME_SIGNER_GROUPS = "signerGroups";
  @SerializedName(SERIALIZED_NAME_SIGNER_GROUPS)
  private List<SignersGroup> signerGroups = null;


   /**
   * It is a reference for internal use
   * @return instanceId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "1", value = "It is a reference for internal use")

  public Long getInstanceId() {
    return instanceId;
  }




  public Document id(Integer id) {
    
    this.id = id;
    return this;
  }

   /**
   * Unique Id of the document
   * @return id
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "1", value = "Unique Id of the document")

  public Integer getId() {
    return id;
  }


  public void setId(Integer id) {
    this.id = id;
  }


  public Document plainDocumentUuid(UUID plainDocumentUuid) {
    
    this.plainDocumentUuid = plainDocumentUuid;
    return this;
  }

   /**
   * Id of the associated Resource (plain PDF file e.g. the one uploaded by the user)
   * @return plainDocumentUuid
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "737dc132-a3f0-11e9-a2a3-2a2ae2dbcce4", value = "Id of the associated Resource (plain PDF file e.g. the one uploaded by the user)")

  public UUID getPlainDocumentUuid() {
    return plainDocumentUuid;
  }


  public void setPlainDocumentUuid(UUID plainDocumentUuid) {
    this.plainDocumentUuid = plainDocumentUuid;
  }


   /**
   * Id of the associated PDF file that contains all the forms filled (present only once the whole document has been filled)
   * @return filledDocumentUuid
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "192db8d8-4128-11ea-b77f-2e728ce88125", value = "Id of the associated PDF file that contains all the forms filled (present only once the whole document has been filled)")

  public UUID getFilledDocumentUuid() {
    return filledDocumentUuid;
  }




   /**
   * Id of the associated PDF file that contains all the signatures  (present only once the whole document has been signed)
   * @return signedDocumentUuid
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "2a126504-4128-11ea-b77f-2e728ce88125", value = "Id of the associated PDF file that contains all the signatures  (present only once the whole document has been signed)")

  public UUID getSignedDocumentUuid() {
    return signedDocumentUuid;
  }




   /**
   * The status of the _Document_, which can be: - \&quot;plain\&quot;: The document has been correctly updated by the user - \&quot;filled\&quot;: The document has been filled - \&quot;signed\&quot;: The document has been signed 
   * @return status
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "signed", value = "The status of the _Document_, which can be: - \"plain\": The document has been correctly updated by the user - \"filled\": The document has been filled - \"signed\": The document has been signed ")

  public StatusEnum getStatus() {
    return status;
  }




  public Document forms(List<FillableForm> forms) {
    
    this.forms = forms;
    return this;
  }

  public Document addFormsItem(FillableForm formsItem) {
    if (this.forms == null) {
      this.forms = new ArrayList<FillableForm>();
    }
    this.forms.add(formsItem);
    return this;
  }

   /**
   * The fillable elements of the document. Use the type field to identify textual fillable fields and signature fields
   * @return forms
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The fillable elements of the document. Use the type field to identify textual fillable fields and signature fields")

  public List<FillableForm> getForms() {
    return forms;
  }


  public void setForms(List<FillableForm> forms) {
    this.forms = forms;
  }


  public Document signatureRequests(List<SignatureRequest> signatureRequests) {
    
    this.signatureRequests = signatureRequests;
    return this;
  }

  public Document addSignatureRequestsItem(SignatureRequest signatureRequestsItem) {
    if (this.signatureRequests == null) {
      this.signatureRequests = new ArrayList<SignatureRequest>();
    }
    this.signatureRequests.add(signatureRequestsItem);
    return this;
  }

   /**
   * The list of signature request of the document
   * @return signatureRequests
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The list of signature request of the document")

  public List<SignatureRequest> getSignatureRequests() {
    return signatureRequests;
  }


  public void setSignatureRequests(List<SignatureRequest> signatureRequests) {
    this.signatureRequests = signatureRequests;
  }


  public Document signerGroups(List<SignersGroup> signerGroups) {
    
    this.signerGroups = signerGroups;
    return this;
  }

  public Document addSignerGroupsItem(SignersGroup signerGroupsItem) {
    if (this.signerGroups == null) {
      this.signerGroups = new ArrayList<SignersGroup>();
    }
    this.signerGroups.add(signerGroupsItem);
    return this;
  }

   /**
   * The sign plan for the document
   * @return signerGroups
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The sign plan for the document")

  public List<SignersGroup> getSignerGroups() {
    return signerGroups;
  }


  public void setSignerGroups(List<SignersGroup> signerGroups) {
    this.signerGroups = signerGroups;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Document document = (Document) o;
    return Objects.equals(this.instanceId, document.instanceId) &&
        Objects.equals(this.id, document.id) &&
        Objects.equals(this.plainDocumentUuid, document.plainDocumentUuid) &&
        Objects.equals(this.filledDocumentUuid, document.filledDocumentUuid) &&
        Objects.equals(this.signedDocumentUuid, document.signedDocumentUuid) &&
        Objects.equals(this.status, document.status) &&
        Objects.equals(this.forms, document.forms) &&
        Objects.equals(this.signatureRequests, document.signatureRequests) &&
        Objects.equals(this.signerGroups, document.signerGroups);
  }

  @Override
  public int hashCode() {
    return Objects.hash(instanceId, id, plainDocumentUuid, filledDocumentUuid, signedDocumentUuid, status, forms, signatureRequests, signerGroups);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Document {\n");
    sb.append("    instanceId: ").append(toIndentedString(instanceId)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    plainDocumentUuid: ").append(toIndentedString(plainDocumentUuid)).append("\n");
    sb.append("    filledDocumentUuid: ").append(toIndentedString(filledDocumentUuid)).append("\n");
    sb.append("    signedDocumentUuid: ").append(toIndentedString(signedDocumentUuid)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    forms: ").append(toIndentedString(forms)).append("\n");
    sb.append("    signatureRequests: ").append(toIndentedString(signatureRequests)).append("\n");
    sb.append("    signerGroups: ").append(toIndentedString(signerGroups)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

