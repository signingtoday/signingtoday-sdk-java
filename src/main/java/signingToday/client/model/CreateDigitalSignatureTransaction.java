/*
 * Signing Today Web
 * *Signing Today* is the perfect Digital Signature Gateway. Whenever in Your workflow You need to add one or more Digital Signatures to Your document, *Signing Today* is the right choice. You prepare Your documents, *Signing Today* takes care of all the rest: send invitations (`signature tickets`) to signers, collects their signatures, send You back the signed document. Integrating *Signing Today* in Your existing applications is very easy. Just follow these API specifications and get inspired by the many examples presented hereafter. 
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package signingToday.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.UUID;
import org.threeten.bp.OffsetDateTime;
import signingToday.client.model.CreateDocument;

/**
 * The **DST Template** from which will be created the DST 
 */
@ApiModel(description = "The **DST Template** from which will be created the DST ")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2020-03-24T08:13:36.809Z[GMT]")
public class CreateDigitalSignatureTransaction {
  public static final String SERIALIZED_NAME_TITLE = "title";
  @SerializedName(SERIALIZED_NAME_TITLE)
  private String title;

  public static final String SERIALIZED_NAME_DOCUMENTS = "documents";
  @SerializedName(SERIALIZED_NAME_DOCUMENTS)
  private List<CreateDocument> documents = null;

  /**
   * Status of the _DST_
   */
  @JsonAdapter(StatusEnum.Adapter.class)
  public enum StatusEnum {
    DRAFT("draft"),
    
    PUBLISHED("published");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StatusEnum fromValue(String value) {
      for (StatusEnum b : StatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StatusEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private StatusEnum status;

  public static final String SERIALIZED_NAME_EXPIRES_AT = "expiresAt";
  @SerializedName(SERIALIZED_NAME_EXPIRES_AT)
  private OffsetDateTime expiresAt;

  public static final String SERIALIZED_NAME_TAGS = "tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  private List<String> tags = null;

  public static final String SERIALIZED_NAME_TEMPLATE = "template";
  @SerializedName(SERIALIZED_NAME_TEMPLATE)
  private Boolean template;

  public static final String SERIALIZED_NAME_PUBLIC_TEMPLATE = "publicTemplate";
  @SerializedName(SERIALIZED_NAME_PUBLIC_TEMPLATE)
  private Boolean publicTemplate;

  public static final String SERIALIZED_NAME_CC_GROUPS = "ccGroups";
  @SerializedName(SERIALIZED_NAME_CC_GROUPS)
  private List<String> ccGroups = null;

  public static final String SERIALIZED_NAME_CC_USERS = "ccUsers";
  @SerializedName(SERIALIZED_NAME_CC_USERS)
  private List<UUID> ccUsers = null;

  public static final String SERIALIZED_NAME_URGENT = "urgent";
  @SerializedName(SERIALIZED_NAME_URGENT)
  private Boolean urgent;


  public CreateDigitalSignatureTransaction title(String title) {
    
    this.title = title;
    return this;
  }

   /**
   * Title of the _Digital Signature Transaction_
   * @return title
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "Real estate sales contract transaction", value = "Title of the _Digital Signature Transaction_")

  public String getTitle() {
    return title;
  }


  public void setTitle(String title) {
    this.title = title;
  }


  public CreateDigitalSignatureTransaction documents(List<CreateDocument> documents) {
    
    this.documents = documents;
    return this;
  }

  public CreateDigitalSignatureTransaction addDocumentsItem(CreateDocument documentsItem) {
    if (this.documents == null) {
      this.documents = new ArrayList<CreateDocument>();
    }
    this.documents.add(documentsItem);
    return this;
  }

   /**
   * The document or documents of the _DST_
   * @return documents
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The document or documents of the _DST_")

  public List<CreateDocument> getDocuments() {
    return documents;
  }


  public void setDocuments(List<CreateDocument> documents) {
    this.documents = documents;
  }


  public CreateDigitalSignatureTransaction status(StatusEnum status) {
    
    this.status = status;
    return this;
  }

   /**
   * Status of the _DST_
   * @return status
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "toSign", value = "Status of the _DST_")

  public StatusEnum getStatus() {
    return status;
  }


  public void setStatus(StatusEnum status) {
    this.status = status;
  }


  public CreateDigitalSignatureTransaction expiresAt(OffsetDateTime expiresAt) {
    
    this.expiresAt = expiresAt;
    return this;
  }

   /**
   * Date of expiration of the _DST_
   * @return expiresAt
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "2007-04-25T12:00Z", value = "Date of expiration of the _DST_")

  public OffsetDateTime getExpiresAt() {
    return expiresAt;
  }


  public void setExpiresAt(OffsetDateTime expiresAt) {
    this.expiresAt = expiresAt;
  }


  public CreateDigitalSignatureTransaction tags(List<String> tags) {
    
    this.tags = tags;
    return this;
  }

  public CreateDigitalSignatureTransaction addTagsItem(String tagsItem) {
    if (this.tags == null) {
      this.tags = new ArrayList<String>();
    }
    this.tags.add(tagsItem);
    return this;
  }

   /**
   * An array of tags for the DST. In such way is possible to tag in the same way some DSTs in order to keep them organized and been easy to find them through the custom search
   * @return tags
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "An array of tags for the DST. In such way is possible to tag in the same way some DSTs in order to keep them organized and been easy to find them through the custom search")

  public List<String> getTags() {
    return tags;
  }


  public void setTags(List<String> tags) {
    this.tags = tags;
  }


  public CreateDigitalSignatureTransaction template(Boolean template) {
    
    this.template = template;
    return this;
  }

   /**
   * True if the _DST_ has been created from a template
   * @return template
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "false", value = "True if the _DST_ has been created from a template")

  public Boolean getTemplate() {
    return template;
  }


  public void setTemplate(Boolean template) {
    this.template = template;
  }


  public CreateDigitalSignatureTransaction publicTemplate(Boolean publicTemplate) {
    
    this.publicTemplate = publicTemplate;
    return this;
  }

   /**
   * Indicates if a public template has been used to create the DST or not
   * @return publicTemplate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "false", value = "Indicates if a public template has been used to create the DST or not")

  public Boolean getPublicTemplate() {
    return publicTemplate;
  }


  public void setPublicTemplate(Boolean publicTemplate) {
    this.publicTemplate = publicTemplate;
  }


  public CreateDigitalSignatureTransaction ccGroups(List<String> ccGroups) {
    
    this.ccGroups = ccGroups;
    return this;
  }

  public CreateDigitalSignatureTransaction addCcGroupsItem(String ccGroupsItem) {
    if (this.ccGroups == null) {
      this.ccGroups = new ArrayList<String>();
    }
    this.ccGroups.add(ccGroupsItem);
    return this;
  }

   /**
   * Name of groups that are informed about the DST.
   * @return ccGroups
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Name of groups that are informed about the DST.")

  public List<String> getCcGroups() {
    return ccGroups;
  }


  public void setCcGroups(List<String> ccGroups) {
    this.ccGroups = ccGroups;
  }


  public CreateDigitalSignatureTransaction ccUsers(List<UUID> ccUsers) {
    
    this.ccUsers = ccUsers;
    return this;
  }

  public CreateDigitalSignatureTransaction addCcUsersItem(UUID ccUsersItem) {
    if (this.ccUsers == null) {
      this.ccUsers = new ArrayList<UUID>();
    }
    this.ccUsers.add(ccUsersItem);
    return this;
  }

   /**
   * UUIDs of the users that are informed about the DST.
   * @return ccUsers
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "UUIDs of the users that are informed about the DST.")

  public List<UUID> getCcUsers() {
    return ccUsers;
  }


  public void setCcUsers(List<UUID> ccUsers) {
    this.ccUsers = ccUsers;
  }


  public CreateDigitalSignatureTransaction urgent(Boolean urgent) {
    
    this.urgent = urgent;
    return this;
  }

   /**
   * True if the DST is flagged as urgent
   * @return urgent
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "false", value = "True if the DST is flagged as urgent")

  public Boolean getUrgent() {
    return urgent;
  }


  public void setUrgent(Boolean urgent) {
    this.urgent = urgent;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateDigitalSignatureTransaction createDigitalSignatureTransaction = (CreateDigitalSignatureTransaction) o;
    return Objects.equals(this.title, createDigitalSignatureTransaction.title) &&
        Objects.equals(this.documents, createDigitalSignatureTransaction.documents) &&
        Objects.equals(this.status, createDigitalSignatureTransaction.status) &&
        Objects.equals(this.expiresAt, createDigitalSignatureTransaction.expiresAt) &&
        Objects.equals(this.tags, createDigitalSignatureTransaction.tags) &&
        Objects.equals(this.template, createDigitalSignatureTransaction.template) &&
        Objects.equals(this.publicTemplate, createDigitalSignatureTransaction.publicTemplate) &&
        Objects.equals(this.ccGroups, createDigitalSignatureTransaction.ccGroups) &&
        Objects.equals(this.ccUsers, createDigitalSignatureTransaction.ccUsers) &&
        Objects.equals(this.urgent, createDigitalSignatureTransaction.urgent);
  }

  @Override
  public int hashCode() {
    return Objects.hash(title, documents, status, expiresAt, tags, template, publicTemplate, ccGroups, ccUsers, urgent);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateDigitalSignatureTransaction {\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("    documents: ").append(toIndentedString(documents)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    expiresAt: ").append(toIndentedString(expiresAt)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("    template: ").append(toIndentedString(template)).append("\n");
    sb.append("    publicTemplate: ").append(toIndentedString(publicTemplate)).append("\n");
    sb.append("    ccGroups: ").append(toIndentedString(ccGroups)).append("\n");
    sb.append("    ccUsers: ").append(toIndentedString(ccUsers)).append("\n");
    sb.append("    urgent: ").append(toIndentedString(urgent)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

