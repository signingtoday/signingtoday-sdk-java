/*
 * Signing Today Web
 * *Signing Today* is the perfect Digital Signature Gateway. Whenever in Your workflow You need to add one or more Digital Signatures to Your document, *Signing Today* is the right choice. You prepare Your documents, *Signing Today* takes care of all the rest: send invitations (`signature tickets`) to signers, collects their signatures, send You back the signed document. Integrating *Signing Today* in Your existing applications is very easy. Just follow these API specifications and get inspired by the many examples presented hereafter. 
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package signingToday.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

/**
 * InlineObject5
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2020-03-24T08:13:36.809Z[GMT]")
public class InlineObject5 {
  public static final String SERIALIZED_NAME_DOMAIN = "domain";
  @SerializedName(SERIALIZED_NAME_DOMAIN)
  private String domain;

  public static final String SERIALIZED_NAME_ID_TOKEN1 = "IDToken1";
  @SerializedName(SERIALIZED_NAME_ID_TOKEN1)
  private String idToken1;

  public static final String SERIALIZED_NAME_ID_TOKEN2 = "IDToken2";
  @SerializedName(SERIALIZED_NAME_ID_TOKEN2)
  private String idToken2;


  public InlineObject5 domain(String domain) {
    
    this.domain = domain;
    return this;
  }

   /**
   * SAML domain
   * @return domain
  **/
  @ApiModelProperty(example = "bit4id", required = true, value = "SAML domain")

  public String getDomain() {
    return domain;
  }


  public void setDomain(String domain) {
    this.domain = domain;
  }


  public InlineObject5 idToken1(String idToken1) {
    
    this.idToken1 = idToken1;
    return this;
  }

   /**
   * The BASE64-encoded SAML Reply in JSON
   * @return idToken1
  **/
  @ApiModelProperty(example = "PHNhbWxwOlJlc3BvbnNlIHhtbG5zOnNhbWw9InVybjpvYXNpczpuYW1lczp0YzpTQU1MOjIuMDphc3NlcnRpb24iIHhtbG5zOnNhbWxwPSJ1cm46b2FzaXM6bmFtZXM6dGM6U0FNTDoyLjA6cHJvdG9jb2wiIElEPSJSZDkwYTY5NDg1YTdiMmMxYjM0NWFjOGQ1Y2UyZmExMzFkZmRkMzRlOSIgVmVyc2lvbj0iMi4wIiBJc3N1ZUluc3RhbnQ9IjIwMTYtMDMtMTdUMjI6NTA6MzBaIiBEZXN0aW5hdGlvbj0iaHR0cHM6Ly97c3ViZG9tYWlufS5mYWNlYm9vay5jb20vd29yay9zYW1sLnBocCI+P...", required = true, value = "The BASE64-encoded SAML Reply in JSON")

  public String getIdToken1() {
    return idToken1;
  }


  public void setIdToken1(String idToken1) {
    this.idToken1 = idToken1;
  }


  public InlineObject5 idToken2(String idToken2) {
    
    this.idToken2 = idToken2;
    return this;
  }

   /**
   * The Hex-encoded HMAC-SHA256 of the decoded IDToken1
   * @return idToken2
  **/
  @ApiModelProperty(example = "f7bc83f430538424b13298e6aa6fb143ef4d59a14946175997479dbc2d1a3cd8", required = true, value = "The Hex-encoded HMAC-SHA256 of the decoded IDToken1")

  public String getIdToken2() {
    return idToken2;
  }


  public void setIdToken2(String idToken2) {
    this.idToken2 = idToken2;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    InlineObject5 inlineObject5 = (InlineObject5) o;
    return Objects.equals(this.domain, inlineObject5.domain) &&
        Objects.equals(this.idToken1, inlineObject5.idToken1) &&
        Objects.equals(this.idToken2, inlineObject5.idToken2);
  }

  @Override
  public int hashCode() {
    return Objects.hash(domain, idToken1, idToken2);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class InlineObject5 {\n");
    sb.append("    domain: ").append(toIndentedString(domain)).append("\n");
    sb.append("    idToken1: ").append(toIndentedString(idToken1)).append("\n");
    sb.append("    idToken2: ").append(toIndentedString(idToken2)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

