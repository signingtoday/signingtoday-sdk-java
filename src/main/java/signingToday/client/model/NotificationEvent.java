/*
 * Signing Today Web
 * *Signing Today* is the perfect Digital Signature Gateway. Whenever in Your workflow You need to add one or more Digital Signatures to Your document, *Signing Today* is the right choice. You prepare Your documents, *Signing Today* takes care of all the rest: send invitations (`signature tickets`) to signers, collects their signatures, send You back the signed document. Integrating *Signing Today* in Your existing applications is very easy. Just follow these API specifications and get inspired by the many examples presented hereafter. 
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package signingToday.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.UUID;
import org.threeten.bp.OffsetDateTime;

/**
 * NotificationEvent
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2020-03-24T08:13:36.809Z[GMT]")
public class NotificationEvent {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Long id;

  public static final String SERIALIZED_NAME_TIME = "time";
  @SerializedName(SERIALIZED_NAME_TIME)
  private OffsetDateTime time;

  public static final String SERIALIZED_NAME_DST_ID = "dstId";
  @SerializedName(SERIALIZED_NAME_DST_ID)
  private UUID dstId;

  public static final String SERIALIZED_NAME_USER_ID = "userId";
  @SerializedName(SERIALIZED_NAME_USER_ID)
  private UUID userId;

  public static final String SERIALIZED_NAME_DST_TITLE = "dstTitle";
  @SerializedName(SERIALIZED_NAME_DST_TITLE)
  private String dstTitle;

  public static final String SERIALIZED_NAME_USERNAME = "username";
  @SerializedName(SERIALIZED_NAME_USERNAME)
  private String username;

  public static final String SERIALIZED_NAME_EMAIL = "email";
  @SerializedName(SERIALIZED_NAME_EMAIL)
  private String email;

  /**
   * Gets or Sets event
   */
  @JsonAdapter(EventEnum.Adapter.class)
  public enum EventEnum {
    STATUS_PUBLISHED("dst_status_published"),
    
    STATUS_EXPIRED("dst_status_expired"),
    
    STATUS_REJECTED("dst_status_rejected"),
    
    STATUS_SIGNED("dst_status_signed"),
    
    STATUS_ERROR("dst_status_error"),
    
    ALERT_FILL("dst_alert_fill"),
    
    ALERT_SIGN("dst_alert_sign"),
    
    ALERT_NOTE_ADDED("dst_alert_note_added"),
    
    ALERT_NOTE_MODIFIED("dst_alert_note_modified"),
    
    ALERT_NOTE_DELETED("dst_alert_note_deleted");

    private String value;

    EventEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static EventEnum fromValue(String value) {
      for (EventEnum b : EventEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<EventEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final EventEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public EventEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return EventEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_EVENT = "event";
  @SerializedName(SERIALIZED_NAME_EVENT)
  private EventEnum event;


   /**
   * Get id
   * @return id
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "1", value = "")

  public Long getId() {
    return id;
  }




   /**
   * Get time
   * @return time
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "2007-04-02T19:30:10Z", value = "")

  public OffsetDateTime getTime() {
    return time;
  }




   /**
   * Get dstId
   * @return dstId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "d6bb4c8f-37bf-4900-a1e4-dd9b0939cafb", value = "")

  public UUID getDstId() {
    return dstId;
  }




   /**
   * Get userId
   * @return userId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "1ca229c8-2a99-4f3e-9421-36377fd8d9e5", value = "")

  public UUID getUserId() {
    return userId;
  }




  public NotificationEvent dstTitle(String dstTitle) {
    
    this.dstTitle = dstTitle;
    return this;
  }

   /**
   * Get dstTitle
   * @return dstTitle
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "Contract", value = "")

  public String getDstTitle() {
    return dstTitle;
  }


  public void setDstTitle(String dstTitle) {
    this.dstTitle = dstTitle;
  }


  public NotificationEvent username(String username) {
    
    this.username = username;
    return this;
  }

   /**
   * If present limits the notification to one user account, otherwise is to be intended for all (active) user accounts (e.g. PC/devices, etc). Indeed one principal (User) could have multiple account (credentials) 
   * @return username
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "johndoe", value = "If present limits the notification to one user account, otherwise is to be intended for all (active) user accounts (e.g. PC/devices, etc). Indeed one principal (User) could have multiple account (credentials) ")

  public String getUsername() {
    return username;
  }


  public void setUsername(String username) {
    this.username = username;
  }


  public NotificationEvent email(String email) {
    
    this.email = email;
    return this;
  }

   /**
   * Get email
   * @return email
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "jdo@bit4id.com", value = "")

  public String getEmail() {
    return email;
  }


  public void setEmail(String email) {
    this.email = email;
  }


   /**
   * Get event
   * @return event
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "evt_dst_status_signed", value = "")

  public EventEnum getEvent() {
    return event;
  }




  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    NotificationEvent notificationEvent = (NotificationEvent) o;
    return Objects.equals(this.id, notificationEvent.id) &&
        Objects.equals(this.time, notificationEvent.time) &&
        Objects.equals(this.dstId, notificationEvent.dstId) &&
        Objects.equals(this.userId, notificationEvent.userId) &&
        Objects.equals(this.dstTitle, notificationEvent.dstTitle) &&
        Objects.equals(this.username, notificationEvent.username) &&
        Objects.equals(this.email, notificationEvent.email) &&
        Objects.equals(this.event, notificationEvent.event);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, time, dstId, userId, dstTitle, username, email, event);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class NotificationEvent {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    time: ").append(toIndentedString(time)).append("\n");
    sb.append("    dstId: ").append(toIndentedString(dstId)).append("\n");
    sb.append("    userId: ").append(toIndentedString(userId)).append("\n");
    sb.append("    dstTitle: ").append(toIndentedString(dstTitle)).append("\n");
    sb.append("    username: ").append(toIndentedString(username)).append("\n");
    sb.append("    email: ").append(toIndentedString(email)).append("\n");
    sb.append("    event: ").append(toIndentedString(event)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

