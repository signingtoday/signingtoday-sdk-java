/*
 * Signing Today Web
 * *Signing Today* is the perfect Digital Signature Gateway. Whenever in Your workflow You need to add one or more Digital Signatures to Your document, *Signing Today* is the right choice. You prepare Your documents, *Signing Today* takes care of all the rest: send invitations (`signature tickets`) to signers, collects their signatures, send You back the signed document. Integrating *Signing Today* in Your existing applications is very easy. Just follow these API specifications and get inspired by the many examples presented hereafter. 
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package signingToday.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.UUID;

/**
 * Authorization challenge object
 */
@ApiModel(description = "Authorization challenge object")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2020-03-24T08:13:36.809Z[GMT]")
public class DeviceAuthorizationResponse {
  public static final String SERIALIZED_NAME_USER_ID = "userId";
  @SerializedName(SERIALIZED_NAME_USER_ID)
  private UUID userId;

  public static final String SERIALIZED_NAME_BASE_U_R_L = "baseURL";
  @SerializedName(SERIALIZED_NAME_BASE_U_R_L)
  private String baseURL;

  public static final String SERIALIZED_NAME_CHALLENGE = "challenge";
  @SerializedName(SERIALIZED_NAME_CHALLENGE)
  private String challenge;


  public DeviceAuthorizationResponse userId(UUID userId) {
    
    this.userId = userId;
    return this;
  }

   /**
   * Get userId
   * @return userId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "737dc132-a3f0-11e9-a2a3-2a2ae2dbcce4", value = "")

  public UUID getUserId() {
    return userId;
  }


  public void setUserId(UUID userId) {
    this.userId = userId;
  }


  public DeviceAuthorizationResponse baseURL(String baseURL) {
    
    this.baseURL = baseURL;
    return this;
  }

   /**
   * Get baseURL
   * @return baseURL
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "https://web.sandbox.signingtoday.com/api/challenge", value = "")

  public String getBaseURL() {
    return baseURL;
  }


  public void setBaseURL(String baseURL) {
    this.baseURL = baseURL;
  }


  public DeviceAuthorizationResponse challenge(String challenge) {
    
    this.challenge = challenge;
    return this;
  }

   /**
   * the challenge to be used to register the device.
   * @return challenge
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "8df173c3bcd4274715491fc196705da8", value = "the challenge to be used to register the device.")

  public String getChallenge() {
    return challenge;
  }


  public void setChallenge(String challenge) {
    this.challenge = challenge;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DeviceAuthorizationResponse deviceAuthorizationResponse = (DeviceAuthorizationResponse) o;
    return Objects.equals(this.userId, deviceAuthorizationResponse.userId) &&
        Objects.equals(this.baseURL, deviceAuthorizationResponse.baseURL) &&
        Objects.equals(this.challenge, deviceAuthorizationResponse.challenge);
  }

  @Override
  public int hashCode() {
    return Objects.hash(userId, baseURL, challenge);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DeviceAuthorizationResponse {\n");
    sb.append("    userId: ").append(toIndentedString(userId)).append("\n");
    sb.append("    baseURL: ").append(toIndentedString(baseURL)).append("\n");
    sb.append("    challenge: ").append(toIndentedString(challenge)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

