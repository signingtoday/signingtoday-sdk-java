/*
 * Signing Today Web
 * *Signing Today* is the perfect Digital Signature Gateway. Whenever in Your workflow You need to add one or more Digital Signatures to Your document, *Signing Today* is the right choice. You prepare Your documents, *Signing Today* takes care of all the rest: send invitations (`signature tickets`) to signers, collects their signatures, send You back the signed document. Integrating *Signing Today* in Your existing applications is very easy. Just follow these API specifications and get inspired by the many examples presented hereafter. 
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package signingToday.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

/**
 * The data the application will use to authenticate itself wherever there will be the need, for example in order to access to a resource
 */
@ApiModel(description = "The data the application will use to authenticate itself wherever there will be the need, for example in order to access to a resource")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2020-03-24T08:13:36.809Z[GMT]")
public class RobotConfigurationAuthentication {
  public static final String SERIALIZED_NAME_USERNAME = "username";
  @SerializedName(SERIALIZED_NAME_USERNAME)
  private String username;

  public static final String SERIALIZED_NAME_PASSWORD = "password";
  @SerializedName(SERIALIZED_NAME_PASSWORD)
  private String password;

  /**
   * The type of authentication
   */
  @JsonAdapter(AuthModeEnum.Adapter.class)
  public enum AuthModeEnum {
    BASIC("basic"),
    
    DIGEST("digest");

    private String value;

    AuthModeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static AuthModeEnum fromValue(String value) {
      for (AuthModeEnum b : AuthModeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<AuthModeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AuthModeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AuthModeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return AuthModeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_AUTH_MODE = "authMode";
  @SerializedName(SERIALIZED_NAME_AUTH_MODE)
  private AuthModeEnum authMode;

  public static final String SERIALIZED_NAME_CLIENT_KEY = "clientKey";
  @SerializedName(SERIALIZED_NAME_CLIENT_KEY)
  private String clientKey;

  public static final String SERIALIZED_NAME_CLIENT_CERT = "clientCert";
  @SerializedName(SERIALIZED_NAME_CLIENT_CERT)
  private String clientCert;


  public RobotConfigurationAuthentication username(String username) {
    
    this.username = username;
    return this;
  }

   /**
   * The username for the authentication
   * @return username
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "jdo", value = "The username for the authentication")

  public String getUsername() {
    return username;
  }


  public void setUsername(String username) {
    this.username = username;
  }


  public RobotConfigurationAuthentication password(String password) {
    
    this.password = password;
    return this;
  }

   /**
   * The password for the authentication
   * @return password
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "A12345678z", value = "The password for the authentication")

  public String getPassword() {
    return password;
  }


  public void setPassword(String password) {
    this.password = password;
  }


  public RobotConfigurationAuthentication authMode(AuthModeEnum authMode) {
    
    this.authMode = authMode;
    return this;
  }

   /**
   * The type of authentication
   * @return authMode
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "basic", value = "The type of authentication")

  public AuthModeEnum getAuthMode() {
    return authMode;
  }


  public void setAuthMode(AuthModeEnum authMode) {
    this.authMode = authMode;
  }


  public RobotConfigurationAuthentication clientKey(String clientKey) {
    
    this.clientKey = clientKey;
    return this;
  }

   /**
   * Client key
   * @return clientKey
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "clientKey", value = "Client key")

  public String getClientKey() {
    return clientKey;
  }


  public void setClientKey(String clientKey) {
    this.clientKey = clientKey;
  }


  public RobotConfigurationAuthentication clientCert(String clientCert) {
    
    this.clientCert = clientCert;
    return this;
  }

   /**
   * Client certificate
   * @return clientCert
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "<client certificate>", value = "Client certificate")

  public String getClientCert() {
    return clientCert;
  }


  public void setClientCert(String clientCert) {
    this.clientCert = clientCert;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RobotConfigurationAuthentication robotConfigurationAuthentication = (RobotConfigurationAuthentication) o;
    return Objects.equals(this.username, robotConfigurationAuthentication.username) &&
        Objects.equals(this.password, robotConfigurationAuthentication.password) &&
        Objects.equals(this.authMode, robotConfigurationAuthentication.authMode) &&
        Objects.equals(this.clientKey, robotConfigurationAuthentication.clientKey) &&
        Objects.equals(this.clientCert, robotConfigurationAuthentication.clientCert);
  }

  @Override
  public int hashCode() {
    return Objects.hash(username, password, authMode, clientKey, clientCert);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RobotConfigurationAuthentication {\n");
    sb.append("    username: ").append(toIndentedString(username)).append("\n");
    sb.append("    password: ").append(toIndentedString(password)).append("\n");
    sb.append("    authMode: ").append(toIndentedString(authMode)).append("\n");
    sb.append("    clientKey: ").append(toIndentedString(clientKey)).append("\n");
    sb.append("    clientCert: ").append(toIndentedString(clientCert)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

