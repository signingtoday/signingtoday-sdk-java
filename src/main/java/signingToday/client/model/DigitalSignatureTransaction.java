/*
 * Signing Today Web
 * *Signing Today* is the perfect Digital Signature Gateway. Whenever in Your workflow You need to add one or more Digital Signatures to Your document, *Signing Today* is the right choice. You prepare Your documents, *Signing Today* takes care of all the rest: send invitations (`signature tickets`) to signers, collects their signatures, send You back the signed document. Integrating *Signing Today* in Your existing applications is very easy. Just follow these API specifications and get inspired by the many examples presented hereafter. 
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package signingToday.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.UUID;
import org.threeten.bp.OffsetDateTime;
import signingToday.client.model.Document;
import signingToday.client.model.LFResource;
import signingToday.client.model.Signature;

/**
 * The **Digital Signature Transaction** is the core object at the center of every &#x60;digital signature workflow&#x60; in Signing Today. It is a &#x60;collection&#x60; element and holds every document (to be signed or just attached to the transaction) as well as the signature plan required to fulfill the transaction; how many signatures are required, are there any forms to be filled, appearance, signature sequence, signers... everything starts here. 
 */
@ApiModel(description = "The **Digital Signature Transaction** is the core object at the center of every `digital signature workflow` in Signing Today. It is a `collection` element and holds every document (to be signed or just attached to the transaction) as well as the signature plan required to fulfill the transaction; how many signatures are required, are there any forms to be filled, appearance, signature sequence, signers... everything starts here. ")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2020-03-24T08:13:36.809Z[GMT]")
public class DigitalSignatureTransaction {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private UUID id;

  public static final String SERIALIZED_NAME_DOMAIN = "domain";
  @SerializedName(SERIALIZED_NAME_DOMAIN)
  private String domain;

  public static final String SERIALIZED_NAME_TITLE = "title";
  @SerializedName(SERIALIZED_NAME_TITLE)
  private String title;

  public static final String SERIALIZED_NAME_REPLACES = "replaces";
  @SerializedName(SERIALIZED_NAME_REPLACES)
  private UUID replaces;

  public static final String SERIALIZED_NAME_REPLACED_BY = "replacedBy";
  @SerializedName(SERIALIZED_NAME_REPLACED_BY)
  private UUID replacedBy;

  public static final String SERIALIZED_NAME_CREATED_BY_USER = "createdByUser";
  @SerializedName(SERIALIZED_NAME_CREATED_BY_USER)
  private UUID createdByUser;

  public static final String SERIALIZED_NAME_CREATED_AT = "createdAt";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private OffsetDateTime createdAt;

  public static final String SERIALIZED_NAME_DOCUMENTS = "documents";
  @SerializedName(SERIALIZED_NAME_DOCUMENTS)
  private List<Document> documents = null;

  public static final String SERIALIZED_NAME_PUBLISHED_AT = "publishedAt";
  @SerializedName(SERIALIZED_NAME_PUBLISHED_AT)
  private OffsetDateTime publishedAt;

  public static final String SERIALIZED_NAME_EXPIRES_AT = "expiresAt";
  @SerializedName(SERIALIZED_NAME_EXPIRES_AT)
  private OffsetDateTime expiresAt;

  public static final String SERIALIZED_NAME_RESOURCES = "resources";
  @SerializedName(SERIALIZED_NAME_RESOURCES)
  private List<LFResource> resources = null;

  public static final String SERIALIZED_NAME_SIGNATURES = "signatures";
  @SerializedName(SERIALIZED_NAME_SIGNATURES)
  private List<Signature> signatures = null;

  /**
   * Status of the _Digital Signature Transaction_
   */
  @JsonAdapter(StatusEnum.Adapter.class)
  public enum StatusEnum {
    DRAFT("draft"),
    
    DOWNLOADINGINDRAFT("downloadingInDraft"),
    
    DOWNLOADINGINPUBLISHED("downloadingInPublished"),
    
    PUBLISHED("published"),
    
    TOFILL("toFill"),
    
    TOSIGN("toSign"),
    
    EXPIRED("expired"),
    
    SIGNED("signed"),
    
    REJECTED("rejected"),
    
    ERROR("error");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StatusEnum fromValue(String value) {
      for (StatusEnum b : StatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StatusEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private StatusEnum status;

  public static final String SERIALIZED_NAME_ERROR_MESSAGE = "errorMessage";
  @SerializedName(SERIALIZED_NAME_ERROR_MESSAGE)
  private String errorMessage;

  public static final String SERIALIZED_NAME_DELETED_AT = "deletedAt";
  @SerializedName(SERIALIZED_NAME_DELETED_AT)
  private OffsetDateTime deletedAt;

  public static final String SERIALIZED_NAME_TAGS = "tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  private List<String> tags = null;

  public static final String SERIALIZED_NAME_TEMPLATE = "template";
  @SerializedName(SERIALIZED_NAME_TEMPLATE)
  private Boolean template;

  public static final String SERIALIZED_NAME_PUBLIC_TEMPLATE = "publicTemplate";
  @SerializedName(SERIALIZED_NAME_PUBLIC_TEMPLATE)
  private Boolean publicTemplate;

  public static final String SERIALIZED_NAME_EXTRA_DATA = "extraData";
  @SerializedName(SERIALIZED_NAME_EXTRA_DATA)
  private Map<String, Object> extraData = null;

  public static final String SERIALIZED_NAME_VISIBLE_TO = "visibleTo";
  @SerializedName(SERIALIZED_NAME_VISIBLE_TO)
  private List<UUID> visibleTo = null;

  public static final String SERIALIZED_NAME_CC_GROUPS = "ccGroups";
  @SerializedName(SERIALIZED_NAME_CC_GROUPS)
  private List<String> ccGroups = null;

  public static final String SERIALIZED_NAME_CC_USERS = "ccUsers";
  @SerializedName(SERIALIZED_NAME_CC_USERS)
  private List<UUID> ccUsers = null;

  public static final String SERIALIZED_NAME_URGENT = "urgent";
  @SerializedName(SERIALIZED_NAME_URGENT)
  private Boolean urgent;

  public static final String SERIALIZED_NAME_UPDATED_AT = "updatedAt";
  @SerializedName(SERIALIZED_NAME_UPDATED_AT)
  private OffsetDateTime updatedAt;


   /**
   * The uuid code that identifies the Digital Signature Transaction
   * @return id
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "d9b4df92-cf85-48dc-a2de-955f518a2992", value = "The uuid code that identifies the Digital Signature Transaction")

  public UUID getId() {
    return id;
  }




  public DigitalSignatureTransaction domain(String domain) {
    
    this.domain = domain;
    return this;
  }

   /**
   * The _domain_ is the Organization which a user or a DST belongs
   * @return domain
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "bit4id", value = "The _domain_ is the Organization which a user or a DST belongs")

  public String getDomain() {
    return domain;
  }


  public void setDomain(String domain) {
    this.domain = domain;
  }


  public DigitalSignatureTransaction title(String title) {
    
    this.title = title;
    return this;
  }

   /**
   * Title of the Digital Signature Transaction
   * @return title
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "Real estate sales contract transaction", value = "Title of the Digital Signature Transaction")

  public String getTitle() {
    return title;
  }


  public void setTitle(String title) {
    this.title = title;
  }


   /**
   * The _DST_ which this one replaces
   * @return replaces
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "0d563aea-e39b-42a5-ad9b-b4d06b379696", value = "The _DST_ which this one replaces")

  public UUID getReplaces() {
    return replaces;
  }




   /**
   * The _DST_ which has replaces the current one
   * @return replacedBy
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "a4f0cd5b-e49a-4692-a846-4455110eda74", value = "The _DST_ which has replaces the current one")

  public UUID getReplacedBy() {
    return replacedBy;
  }




   /**
   * The user created the Digital Signature Transaction
   * @return createdByUser
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "e6419924-fd1d-4c42-9fa2-88023461f5df", value = "The user created the Digital Signature Transaction")

  public UUID getCreatedByUser() {
    return createdByUser;
  }




   /**
   * Date of creation of the Digital Signature Transaction
   * @return createdAt
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "2007-04-02T19:30:10Z", value = "Date of creation of the Digital Signature Transaction")

  public OffsetDateTime getCreatedAt() {
    return createdAt;
  }




  public DigitalSignatureTransaction documents(List<Document> documents) {
    
    this.documents = documents;
    return this;
  }

  public DigitalSignatureTransaction addDocumentsItem(Document documentsItem) {
    if (this.documents == null) {
      this.documents = new ArrayList<Document>();
    }
    this.documents.add(documentsItem);
    return this;
  }

   /**
   * The _documents_ field is an array containing document objects, where everyone of them is defined as follows 
   * @return documents
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The _documents_ field is an array containing document objects, where everyone of them is defined as follows ")

  public List<Document> getDocuments() {
    return documents;
  }


  public void setDocuments(List<Document> documents) {
    this.documents = documents;
  }


   /**
   * The _date-time_ the DST has been published
   * @return publishedAt
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "2007-04-05T11:10:42Z", value = "The _date-time_ the DST has been published")

  public OffsetDateTime getPublishedAt() {
    return publishedAt;
  }




   /**
   * Indicates when the DST will expire
   * @return expiresAt
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "2007-04-25T12:00Z", value = "Indicates when the DST will expire")

  public OffsetDateTime getExpiresAt() {
    return expiresAt;
  }




  public DigitalSignatureTransaction resources(List<LFResource> resources) {
    
    this.resources = resources;
    return this;
  }

  public DigitalSignatureTransaction addResourcesItem(LFResource resourcesItem) {
    if (this.resources == null) {
      this.resources = new ArrayList<LFResource>();
    }
    this.resources.add(resourcesItem);
    return this;
  }

   /**
   * An array of resources attached to the _DST_, each one defined as follows
   * @return resources
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "An array of resources attached to the _DST_, each one defined as follows")

  public List<LFResource> getResources() {
    return resources;
  }


  public void setResources(List<LFResource> resources) {
    this.resources = resources;
  }


  public DigitalSignatureTransaction signatures(List<Signature> signatures) {
    
    this.signatures = signatures;
    return this;
  }

  public DigitalSignatureTransaction addSignaturesItem(Signature signaturesItem) {
    if (this.signatures == null) {
      this.signatures = new ArrayList<Signature>();
    }
    this.signatures.add(signaturesItem);
    return this;
  }

   /**
   * An array of signatures, each one defined as follows
   * @return signatures
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "An array of signatures, each one defined as follows")

  public List<Signature> getSignatures() {
    return signatures;
  }


  public void setSignatures(List<Signature> signatures) {
    this.signatures = signatures;
  }


   /**
   * Status of the _Digital Signature Transaction_
   * @return status
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "published", value = "Status of the _Digital Signature Transaction_")

  public StatusEnum getStatus() {
    return status;
  }




  public DigitalSignatureTransaction errorMessage(String errorMessage) {
    
    this.errorMessage = errorMessage;
    return this;
  }

   /**
   * The explication of the occurred error
   * @return errorMessage
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The explication of the occurred error")

  public String getErrorMessage() {
    return errorMessage;
  }


  public void setErrorMessage(String errorMessage) {
    this.errorMessage = errorMessage;
  }


   /**
   * Indicates when the _DST_ has been deleted
   * @return deletedAt
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "2007-04-02T19:30:10Z", value = "Indicates when the _DST_ has been deleted")

  public OffsetDateTime getDeletedAt() {
    return deletedAt;
  }




  public DigitalSignatureTransaction tags(List<String> tags) {
    
    this.tags = tags;
    return this;
  }

  public DigitalSignatureTransaction addTagsItem(String tagsItem) {
    if (this.tags == null) {
      this.tags = new ArrayList<String>();
    }
    this.tags.add(tagsItem);
    return this;
  }

   /**
   * An array of tags for the _DST_. In such way is possible to tag in the same way some _DSTs_ in order to keep them organized and been easy to find them through the custom search
   * @return tags
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "An array of tags for the _DST_. In such way is possible to tag in the same way some _DSTs_ in order to keep them organized and been easy to find them through the custom search")

  public List<String> getTags() {
    return tags;
  }


  public void setTags(List<String> tags) {
    this.tags = tags;
  }


  public DigitalSignatureTransaction template(Boolean template) {
    
    this.template = template;
    return this;
  }

   /**
   * Indicates if a template has been used to create the DST or not
   * @return template
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "false", value = "Indicates if a template has been used to create the DST or not")

  public Boolean getTemplate() {
    return template;
  }


  public void setTemplate(Boolean template) {
    this.template = template;
  }


  public DigitalSignatureTransaction publicTemplate(Boolean publicTemplate) {
    
    this.publicTemplate = publicTemplate;
    return this;
  }

   /**
   * Indicates if a public template has been used to create the DST or not
   * @return publicTemplate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "false", value = "Indicates if a public template has been used to create the DST or not")

  public Boolean getPublicTemplate() {
    return publicTemplate;
  }


  public void setPublicTemplate(Boolean publicTemplate) {
    this.publicTemplate = publicTemplate;
  }


  public DigitalSignatureTransaction extraData(Map<String, Object> extraData) {
    
    this.extraData = extraData;
    return this;
  }

  public DigitalSignatureTransaction putExtraDataItem(String key, Object extraDataItem) {
    if (this.extraData == null) {
      this.extraData = new HashMap<String, Object>();
    }
    this.extraData.put(key, extraDataItem);
    return this;
  }

   /**
   * Extra information about the _DST_
   * @return extraData
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "{\"st_uuid\":\"d6ebb1ed-73a4-45ba-b33a-7db8a6cdd882\"}", value = "Extra information about the _DST_")

  public Map<String, Object> getExtraData() {
    return extraData;
  }


  public void setExtraData(Map<String, Object> extraData) {
    this.extraData = extraData;
  }


  public DigitalSignatureTransaction visibleTo(List<UUID> visibleTo) {
    
    this.visibleTo = visibleTo;
    return this;
  }

  public DigitalSignatureTransaction addVisibleToItem(UUID visibleToItem) {
    if (this.visibleTo == null) {
      this.visibleTo = new ArrayList<UUID>();
    }
    this.visibleTo.add(visibleToItem);
    return this;
  }

   /**
   * UUIDs of the users to which the DST is visible
   * @return visibleTo
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "UUIDs of the users to which the DST is visible")

  public List<UUID> getVisibleTo() {
    return visibleTo;
  }


  public void setVisibleTo(List<UUID> visibleTo) {
    this.visibleTo = visibleTo;
  }


  public DigitalSignatureTransaction ccGroups(List<String> ccGroups) {
    
    this.ccGroups = ccGroups;
    return this;
  }

  public DigitalSignatureTransaction addCcGroupsItem(String ccGroupsItem) {
    if (this.ccGroups == null) {
      this.ccGroups = new ArrayList<String>();
    }
    this.ccGroups.add(ccGroupsItem);
    return this;
  }

   /**
   * Name of groups that are informed about the DST
   * @return ccGroups
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Name of groups that are informed about the DST")

  public List<String> getCcGroups() {
    return ccGroups;
  }


  public void setCcGroups(List<String> ccGroups) {
    this.ccGroups = ccGroups;
  }


  public DigitalSignatureTransaction ccUsers(List<UUID> ccUsers) {
    
    this.ccUsers = ccUsers;
    return this;
  }

  public DigitalSignatureTransaction addCcUsersItem(UUID ccUsersItem) {
    if (this.ccUsers == null) {
      this.ccUsers = new ArrayList<UUID>();
    }
    this.ccUsers.add(ccUsersItem);
    return this;
  }

   /**
   * UUIDs of the users that are informed about the DST
   * @return ccUsers
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "UUIDs of the users that are informed about the DST")

  public List<UUID> getCcUsers() {
    return ccUsers;
  }


  public void setCcUsers(List<UUID> ccUsers) {
    this.ccUsers = ccUsers;
  }


  public DigitalSignatureTransaction urgent(Boolean urgent) {
    
    this.urgent = urgent;
    return this;
  }

   /**
   * True if the DST is flagged as urgent
   * @return urgent
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "false", value = "True if the DST is flagged as urgent")

  public Boolean getUrgent() {
    return urgent;
  }


  public void setUrgent(Boolean urgent) {
    this.urgent = urgent;
  }


   /**
   * Indicates the last update of the DST, such as the performing of a signature
   * @return updatedAt
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "2007-04-02T19:30:10Z", value = "Indicates the last update of the DST, such as the performing of a signature")

  public OffsetDateTime getUpdatedAt() {
    return updatedAt;
  }




  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DigitalSignatureTransaction digitalSignatureTransaction = (DigitalSignatureTransaction) o;
    return Objects.equals(this.id, digitalSignatureTransaction.id) &&
        Objects.equals(this.domain, digitalSignatureTransaction.domain) &&
        Objects.equals(this.title, digitalSignatureTransaction.title) &&
        Objects.equals(this.replaces, digitalSignatureTransaction.replaces) &&
        Objects.equals(this.replacedBy, digitalSignatureTransaction.replacedBy) &&
        Objects.equals(this.createdByUser, digitalSignatureTransaction.createdByUser) &&
        Objects.equals(this.createdAt, digitalSignatureTransaction.createdAt) &&
        Objects.equals(this.documents, digitalSignatureTransaction.documents) &&
        Objects.equals(this.publishedAt, digitalSignatureTransaction.publishedAt) &&
        Objects.equals(this.expiresAt, digitalSignatureTransaction.expiresAt) &&
        Objects.equals(this.resources, digitalSignatureTransaction.resources) &&
        Objects.equals(this.signatures, digitalSignatureTransaction.signatures) &&
        Objects.equals(this.status, digitalSignatureTransaction.status) &&
        Objects.equals(this.errorMessage, digitalSignatureTransaction.errorMessage) &&
        Objects.equals(this.deletedAt, digitalSignatureTransaction.deletedAt) &&
        Objects.equals(this.tags, digitalSignatureTransaction.tags) &&
        Objects.equals(this.template, digitalSignatureTransaction.template) &&
        Objects.equals(this.publicTemplate, digitalSignatureTransaction.publicTemplate) &&
        Objects.equals(this.extraData, digitalSignatureTransaction.extraData) &&
        Objects.equals(this.visibleTo, digitalSignatureTransaction.visibleTo) &&
        Objects.equals(this.ccGroups, digitalSignatureTransaction.ccGroups) &&
        Objects.equals(this.ccUsers, digitalSignatureTransaction.ccUsers) &&
        Objects.equals(this.urgent, digitalSignatureTransaction.urgent) &&
        Objects.equals(this.updatedAt, digitalSignatureTransaction.updatedAt);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, domain, title, replaces, replacedBy, createdByUser, createdAt, documents, publishedAt, expiresAt, resources, signatures, status, errorMessage, deletedAt, tags, template, publicTemplate, extraData, visibleTo, ccGroups, ccUsers, urgent, updatedAt);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DigitalSignatureTransaction {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    domain: ").append(toIndentedString(domain)).append("\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("    replaces: ").append(toIndentedString(replaces)).append("\n");
    sb.append("    replacedBy: ").append(toIndentedString(replacedBy)).append("\n");
    sb.append("    createdByUser: ").append(toIndentedString(createdByUser)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    documents: ").append(toIndentedString(documents)).append("\n");
    sb.append("    publishedAt: ").append(toIndentedString(publishedAt)).append("\n");
    sb.append("    expiresAt: ").append(toIndentedString(expiresAt)).append("\n");
    sb.append("    resources: ").append(toIndentedString(resources)).append("\n");
    sb.append("    signatures: ").append(toIndentedString(signatures)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    errorMessage: ").append(toIndentedString(errorMessage)).append("\n");
    sb.append("    deletedAt: ").append(toIndentedString(deletedAt)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("    template: ").append(toIndentedString(template)).append("\n");
    sb.append("    publicTemplate: ").append(toIndentedString(publicTemplate)).append("\n");
    sb.append("    extraData: ").append(toIndentedString(extraData)).append("\n");
    sb.append("    visibleTo: ").append(toIndentedString(visibleTo)).append("\n");
    sb.append("    ccGroups: ").append(toIndentedString(ccGroups)).append("\n");
    sb.append("    ccUsers: ").append(toIndentedString(ccUsers)).append("\n");
    sb.append("    urgent: ").append(toIndentedString(urgent)).append("\n");
    sb.append("    updatedAt: ").append(toIndentedString(updatedAt)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

