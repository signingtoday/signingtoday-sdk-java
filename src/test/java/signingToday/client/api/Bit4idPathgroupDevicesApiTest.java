/*
 * Signing Today Web
 * *Signing Today* is the perfect Digital Signature Gateway. Whenever in Your workflow You need to add one or more Digital Signatures to Your document, *Signing Today* is the right choice. You prepare Your documents, *Signing Today* takes care of all the rest: send invitations (`signature tickets`) to signers, collects their signatures, send You back the signed document. Integrating *Signing Today* in Your existing applications is very easy. Just follow these API specifications and get inspired by the many examples presented hereafter. 
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package signingToday.client.api;

import signingToday.client.ApiException;
import signingToday.client.model.DeviceAuthorizationResponse;
import signingToday.client.model.ErrorResponse;
import signingToday.client.model.InlineObject7;
import signingToday.client.model.ServiceFailureResponse;
import signingToday.client.model.TrustedDevicesGetResponse;
import java.util.UUID;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for Bit4idPathgroupDevicesApi
 */
@Ignore
public class Bit4idPathgroupDevicesApiTest {

    private final Bit4idPathgroupDevicesApi api = new Bit4idPathgroupDevicesApi();

    
    /**
     * Clear a trusted device
     *
     * This APIs allows to deregister a _deviceId_ of a trusted device.  It also deletes any notification push-token associated to the trusted device. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deviceAuthorizationDeleteTest() throws ApiException {
        String deviceId = null;
        UUID userId = null;
        api.deviceAuthorizationDelete(deviceId, userId);

        // TODO: test validations
    }
    
    /**
     * Retrieve a challenge for authorizing a new trusted device
     *
     * This API allows to retrieve a challenge in order to authorize a new trusted device.   - If asked in image/png the challenge is given encoded as a QR-Code image.   - An invocation of the endpoint invalidate any previous challenge.   - The challenge lasts 10 minutes. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deviceAuthorizationGetTest() throws ApiException {
        DeviceAuthorizationResponse response = api.deviceAuthorizationGet();

        // TODO: test validations
    }
    
    /**
     * Register a new trusted device
     *
     * This API allows to register a new trusted device. If the device is already present, it returns the current associated Token and updates the name. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deviceAuthorizationPostTest() throws ApiException {
        InlineObject7 inlineObject7 = null;
        List<UUID> response = api.deviceAuthorizationPost(inlineObject7);

        // TODO: test validations
    }
    
    /**
     * Get the list of trusted devices
     *
     * The API allows to enumerate all the devices of a user. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void devicesGetTest() throws ApiException {
        UUID userId = null;
        Integer $top = null;
        Long $skip = null;
        Boolean $count = null;
        TrustedDevicesGetResponse response = api.devicesGet(userId, $top, $skip, $count);

        // TODO: test validations
    }
    
}
