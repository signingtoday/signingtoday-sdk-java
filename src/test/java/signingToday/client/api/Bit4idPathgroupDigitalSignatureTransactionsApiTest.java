/*
 * Signing Today Web
 * *Signing Today* is the perfect Digital Signature Gateway. Whenever in Your workflow You need to add one or more Digital Signatures to Your document, *Signing Today* is the right choice. You prepare Your documents, *Signing Today* takes care of all the rest: send invitations (`signature tickets`) to signers, collects their signatures, send You back the signed document. Integrating *Signing Today* in Your existing applications is very easy. Just follow these API specifications and get inspired by the many examples presented hereafter. 
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package signingToday.client.api;

import signingToday.client.ApiException;
import signingToday.client.model.AuditRecord;
import signingToday.client.model.DSTSigningAddressResponse;
import signingToday.client.model.DSTsGetResponse;
import signingToday.client.model.DigitalSignatureTransaction;
import signingToday.client.model.ErrorResponse;
import signingToday.client.model.FillableForm;
import signingToday.client.model.ServiceFailureResponse;
import java.util.UUID;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for Bit4idPathgroupDigitalSignatureTransactionsApi
 */
@Ignore
public class Bit4idPathgroupDigitalSignatureTransactionsApiTest {

    private final Bit4idPathgroupDigitalSignatureTransactionsApi api = new Bit4idPathgroupDigitalSignatureTransactionsApi();

    
    /**
     * Retrieve the audit records associated to the DST
     *
     * This API allows to retrieves the audit records associated to the DST.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void dSTIdAuditGetTest() throws ApiException {
        UUID id = null;
        List<AuditRecord> response = api.dSTIdAuditGet(id);

        // TODO: test validations
    }
    
    /**
     * Delete a DST
     *
     * This API allows to delete a DST. Actually the DST is marked as deleted thus not displayed anymore into the organization, but it will still be present in the database.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void dSTIdDeleteTest() throws ApiException {
        UUID id = null;
        api.dSTIdDelete(id);

        // TODO: test validations
    }
    
    /**
     * Fill a form of a DST
     *
     * This API allows to fill a form of a DST.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void dSTIdFillPatchTest() throws ApiException {
        UUID id = null;
        FillableForm fillableForm = null;
        DigitalSignatureTransaction response = api.dSTIdFillPatch(id, fillableForm);

        // TODO: test validations
    }
    
    /**
     * Retrieve a DST
     *
     * This API allows to retrieve a DST.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void dSTIdGetTest() throws ApiException {
        UUID id = null;
        DigitalSignatureTransaction response = api.dSTIdGet(id);

        // TODO: test validations
    }
    
    /**
     * Instantiate a DST from a template
     *
     * This API allows to instantiate a DST from a template by specifying the template Id.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void dSTIdInstantiatePostTest() throws ApiException {
        UUID id = null;
        DigitalSignatureTransaction response = api.dSTIdInstantiatePost(id);

        // TODO: test validations
    }
    
    /**
     * Modify a published DST template
     *
     * This API allows to move a published DST to DRAFT, allowing the modification. This way is possible to modify a _DST Template_. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void dSTIdModifyPostTest() throws ApiException {
        UUID id = null;
        DigitalSignatureTransaction response = api.dSTIdModifyPost(id);

        // TODO: test validations
    }
    
    /**
     * Send notifications for a DST
     *
     * This API allows to send notifications to pending users for an active _DST_.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void dSTIdNotifyPostTest() throws ApiException {
        UUID id = null;
        api.dSTIdNotifyPost(id);

        // TODO: test validations
    }
    
    /**
     * Publish a DST
     *
     * This API allows to publish a DST, the new state becomes published. It will automatically evolve to a new state where it will be filled or signed.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void dSTIdPublishPostTest() throws ApiException {
        UUID id = null;
        DigitalSignatureTransaction response = api.dSTIdPublishPost(id);

        // TODO: test validations
    }
    
    /**
     * Update a DST
     *
     * This API allows to update a DST.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void dSTIdPutTest() throws ApiException {
        UUID id = null;
        DigitalSignatureTransaction digitalSignatureTransaction = null;
        DigitalSignatureTransaction response = api.dSTIdPut(id, digitalSignatureTransaction);

        // TODO: test validations
    }
    
    /**
     * Replace a rejected DST
     *
     * This API allows to replace a rejected DST instantiating a new one. The replacing DST is created in DRAFT state.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void dSTIdReplacePostTest() throws ApiException {
        UUID id = null;
        DigitalSignatureTransaction response = api.dSTIdReplacePost(id);

        // TODO: test validations
    }
    
    /**
     * Return the address for signing
     *
     * This API returns the address to perform the signature.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void dSTIdSignDocIdSignIdGetTest() throws ApiException {
        UUID id = null;
        Integer docId = null;
        Integer signId = null;
        DSTSigningAddressResponse response = api.dSTIdSignDocIdSignIdGet(id, docId, signId);

        // TODO: test validations
    }
    
    /**
     * Create a template from a DST
     *
     * This API allows to creates a new template starting from a DST. Currently implemented only for published DST templates.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void dSTIdTemplatizePostTest() throws ApiException {
        UUID id = null;
        DigitalSignatureTransaction response = api.dSTIdTemplatizePost(id);

        // TODO: test validations
    }
    
    /**
     * Retrieve DSTs
     *
     * This API allows to list the DSTs of an organization.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void dSTsGetTest() throws ApiException {
        Boolean template = null;
        UUID userId = null;
        Integer $top = null;
        Long $skip = null;
        Boolean $count = null;
        String $orderBy = null;
        String $filter = null;
        DSTsGetResponse response = api.dSTsGet(template, userId, $top, $skip, $count, $orderBy, $filter);

        // TODO: test validations
    }
    
    /**
     * Create a new DST
     *
     * This API allows to creates a new DST. A DST is created in the Draft state and then updated using PUT. Example of creation request:  &#x60;&#x60;&#x60; {   status: \&quot;draft\&quot;,   publishedAt: null,   tags: [],   urgent: false,   template: false } &#x60;&#x60;&#x60;  To add documents use the Resources Patch endpoint &#x60;/DST/{id}/resources&#x60;.  If the *template* flag is set true the DST is a Template. If the *publicTemplate* flag is set true the Template is visible to all users with rights to create a DST.  A DST is made made available to users using *publish* end point. A template generates a DST with the *instantiate* endpoint. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void dSTsPostTest() throws ApiException {
        DigitalSignatureTransaction digitalSignatureTransaction = null;
        DigitalSignatureTransaction response = api.dSTsPost(digitalSignatureTransaction);

        // TODO: test validations
    }
    
}
