/*
 * Signing Today Web
 * *Signing Today* is the perfect Digital Signature Gateway. Whenever in Your workflow You need to add one or more Digital Signatures to Your document, *Signing Today* is the right choice. You prepare Your documents, *Signing Today* takes care of all the rest: send invitations (`signature tickets`) to signers, collects their signatures, send You back the signed document. Integrating *Signing Today* in Your existing applications is very easy. Just follow these API specifications and get inspired by the many examples presented hereafter. 
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package signingToday.client.api;

import signingToday.client.ApiException;
import signingToday.client.model.DigitalSignatureTransaction;
import signingToday.client.model.ErrorResponse;
import java.io.File;
import signingToday.client.model.LFResource;
import signingToday.client.model.ServiceFailureResponse;
import java.util.UUID;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ResourcesApi
 */
@Ignore
public class ResourcesApiTest {

    private final ResourcesApi api = new ResourcesApi();

    
    /**
     * Retrieve all resources associated to a DST
     *
     * This API allows to retrieve all resources associated to a DST.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void dSTIdResourcesGetTest() throws ApiException {
        UUID id = null;
        File response = api.dSTIdResourcesGet(id);

        // TODO: test validations
    }
    
    /**
     * Append a new resource to a DST
     *
     * This API allows to append a new Resource to a DST.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void dSTIdResourcesPatchTest() throws ApiException {
        UUID id = null;
        File file = null;
        String filename = null;
        String resourceType = null;
        String title = null;
        DigitalSignatureTransaction response = api.dSTIdResourcesPatch(id, file, filename, resourceType, title);

        // TODO: test validations
    }
    
    /**
     * Delete a Resource
     *
     * This API allows to delete a Resource.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void dSTResourceIdDeleteTest() throws ApiException {
        UUID id = null;
        DigitalSignatureTransaction response = api.dSTResourceIdDelete(id);

        // TODO: test validations
    }
    
    /**
     * Retrieve a Resource
     *
     * This API allows to retrieve a Resource.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void resourceIdGetTest() throws ApiException {
        UUID id = null;
        File response = api.resourceIdGet(id);

        // TODO: test validations
    }
    
    /**
     * Update a Resource
     *
     * This API allows to update a Resource.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void resourceIdPutTest() throws ApiException {
        UUID id = null;
        LFResource lfResource = null;
        api.resourceIdPut(id, lfResource);

        // TODO: test validations
    }
    
    /**
     * Delete a user appearance resource.
     *
     * This API allows to delete an identity appearance resource.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void userIdIdentityIdentityIdAppearanceDeleteTest() throws ApiException {
        UUID id = null;
        UUID identityId = null;
        api.userIdIdentityIdentityIdAppearanceDelete(id, identityId);

        // TODO: test validations
    }
    
    /**
     * Download an identity appearance resource
     *
     * This API allows to get the identity appearance resource.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void userIdIdentityIdentityIdAppearanceGetTest() throws ApiException {
        UUID id = null;
        UUID identityId = null;
        File response = api.userIdIdentityIdentityIdAppearanceGet(id, identityId);

        // TODO: test validations
    }
    
    /**
     * Add a graphical appearance to a user&#39;s identity
     *
     * This API allows to add a graphical appearance to the identity of a user.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void userIdIdentityIdentityIdAppearancePostTest() throws ApiException {
        UUID id = null;
        UUID identityId = null;
        File file = null;
        String filename = null;
        String resourceType = null;
        String title = null;
        LFResource response = api.userIdIdentityIdentityIdAppearancePost(id, identityId, file, filename, resourceType, title);

        // TODO: test validations
    }
    
}
