/*
 * Signing Today Web
 * *Signing Today* is the perfect Digital Signature Gateway. Whenever in Your workflow You need to add one or more Digital Signatures to Your document, *Signing Today* is the right choice. You prepare Your documents, *Signing Today* takes care of all the rest: send invitations (`signature tickets`) to signers, collects their signatures, send You back the signed document. Integrating *Signing Today* in Your existing applications is very easy. Just follow these API specifications and get inspired by the many examples presented hereafter. 
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package signingToday.client.api;

import signingToday.client.ApiException;
import signingToday.client.model.CreateUserRequest;
import signingToday.client.model.ErrorResponse;
import signingToday.client.model.Identity;
import signingToday.client.model.ServiceFailureResponse;
import java.util.UUID;
import signingToday.client.model.User;
import signingToday.client.model.UserGroup;
import signingToday.client.model.UserGroupGetResponse;
import signingToday.client.model.UsersGetResponse;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for Bit4idPathgroupUsersApi
 */
@Ignore
public class Bit4idPathgroupUsersApiTest {

    private final Bit4idPathgroupUsersApi api = new Bit4idPathgroupUsersApi();

    
    /**
     * Enable or disable a User
     *
     * This API allows to **enable** or **disable** a User account. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void userIdDeleteTest() throws ApiException {
        UUID id = null;
        Boolean enabled = null;
        api.userIdDelete(id, enabled);

        // TODO: test validations
    }
    
    /**
     * Retrieve a User
     *
     * This API allows to retrieve a User.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void userIdGetTest() throws ApiException {
        UUID id = null;
        User response = api.userIdGet(id);

        // TODO: test validations
    }
    
    /**
     * Retrieve User identities
     *
     * This API allows to retrieve user identities.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void userIdIdentitiesGetTest() throws ApiException {
        UUID id = null;
        List<Identity> response = api.userIdIdentitiesGet(id);

        // TODO: test validations
    }
    
    /**
     * Update a User
     *
     * This API allows to update a User.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void userIdPutTest() throws ApiException {
        UUID id = null;
        User user = null;
        api.userIdPut(id, user);

        // TODO: test validations
    }
    
    /**
     * Change the User role
     *
     * This API allows to change the permissions associated to the users, (**capabilities**) according to predefined user roles. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void userIdRolePutTest() throws ApiException {
        UUID id = null;
        String newRole = null;
        api.userIdRolePut(id, newRole);

        // TODO: test validations
    }
    
    /**
     * Retrieve Users
     *
     * This allows to get the list of the Users of an Organization.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void usersGetTest() throws ApiException {
        Integer $top = null;
        Long $skip = null;
        Boolean $count = null;
        String $orderBy = null;
        String $filter = null;
        UsersGetResponse response = api.usersGet($top, $skip, $count, $orderBy, $filter);

        // TODO: test validations
    }
    
    /**
     * Retrieve UserGroups
     *
     * This API allows to get the list of the UserGroups.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void usersGroupsGetTest() throws ApiException {
        Integer $top = null;
        Long $skip = null;
        Boolean $count = null;
        String $orderBy = null;
        String $filter = null;
        UserGroupGetResponse response = api.usersGroupsGet($top, $skip, $count, $orderBy, $filter);

        // TODO: test validations
    }
    
    /**
     * Create a new UserGroups
     *
     * This API allows to create a new UserGroups.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void usersGroupsPostTest() throws ApiException {
        List<UserGroup> userGroup = null;
        api.usersGroupsPost(userGroup);

        // TODO: test validations
    }
    
    /**
     * Create a new User
     *
     * This API allows to create a new User.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void usersPostTest() throws ApiException {
        CreateUserRequest createUserRequest = null;
        UUID response = api.usersPost(createUserRequest);

        // TODO: test validations
    }
    
}
